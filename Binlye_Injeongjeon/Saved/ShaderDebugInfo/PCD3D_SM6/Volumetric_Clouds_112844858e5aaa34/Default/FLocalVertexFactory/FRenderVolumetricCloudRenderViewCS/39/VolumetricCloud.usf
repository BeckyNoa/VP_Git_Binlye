#line 1 "__UE_FILENAME_SENTINEL__"
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }
float2 UnpackFloat2FromUInt(uint In)
{
	return float2(f16tof32(In), f16tof32(In >> 16));
}
float4 UnpackRGBA8(uint In)
{
	float4 Out;
	Out.r = float((In >> 0) & 0xFF) * (1.0f / 255.0f);
	Out.g = float((In >> 8) & 0xFF) * (1.0f / 255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f / 255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f / 255.0f);
	return Out;
}
float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6) & 0x7FF0);
	float b = f16tof32((rgb << 5) & 0x7FE0);
	return float3(r, g, b);
}
struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};
const static float PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
struct FDFScalar
{
	float High;
	float Low;
};
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFScalar DFPromote(FDFScalar Value) { return Value; }
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }
float DFDemote(FDFScalar Value) { return Value.High + Value.Low; }
float DFDemote(float Value) { return Value; }
FDFScalar DFNegate(FDFScalar Value)
{
	return MakeDFScalar(-Value.High, -Value.Low);
}
FDFScalar DFTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);
}
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);
}
FDFScalar DFFastAdd(float Lhs, float Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFScalar DFFastAdd(FDFScalar Lhs, FDFScalar Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFScalar DFFastAdd(FDFScalar Lhs, float Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs);
	S.Low += Lhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFScalar DFFastAdd(float Lhs, FDFScalar Rhs) { return DFFastAdd(Rhs, Lhs); }
FDFScalar DFFastSubtract(float Lhs, float Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFScalar DFFastSubtract(FDFScalar Lhs, FDFScalar Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
FDFScalar DFFastSubtract(FDFScalar Lhs, float Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFScalar DFFastSubtract(float Lhs, FDFScalar Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
float DFFastLocalSubtractDemote(FDFScalar Lhs, FDFScalar Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(FDFScalar Lhs, float Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(float Lhs, FDFScalar Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{
	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);
}
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{
	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{
	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
struct FDFVector2
{
	float2 High;
	float2 Low;
};
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }
float2 DFDemote(FDFVector2 Value) { return Value.High + Value.Low; }
float2 DFDemote(float2 Value) { return Value; }
FDFVector2 DFNegate(FDFVector2 Value)
{
	return MakeDFVector2(-Value.High, -Value.Low);
}
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);
}
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);
}
FDFVector2 DFFastAdd(float2 Lhs, float2 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector2 DFFastAdd(FDFVector2 Lhs, FDFVector2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector2 DFFastAdd(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs);
	S.Low += Lhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector2 DFFastAdd(float2 Lhs, FDFVector2 Rhs) { return DFFastAdd(Rhs, Lhs); }
FDFVector2 DFFastSubtract(float2 Lhs, float2 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector2 DFFastSubtract(FDFVector2 Lhs, FDFVector2 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
FDFVector2 DFFastSubtract(FDFVector2 Lhs, float2 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector2 DFFastSubtract(float2 Lhs, FDFVector2 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float2 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, float2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(float2 Lhs, FDFVector2 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{
	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);
}
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}
FDFVector2  DFFastAdd (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastAdd (float Lhs, FDFVector2 Rhs) { return DFFastAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastAdd (FDFScalar Lhs, float2 Rhs) { return DFFastAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastAdd (float Lhs, float2 Rhs) { return DFFastAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastAdd (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastAdd (FDFVector2 Lhs, float Rhs)     { return DFFastAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastAdd (float2 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastAdd (float2 Lhs, float Rhs) { return DFFastAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastSubtract (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastSubtract (float Lhs, FDFVector2 Rhs) { return DFFastSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastSubtract (FDFScalar Lhs, float2 Rhs) { return DFFastSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastSubtract (float Lhs, float2 Rhs) { return DFFastSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastSubtract (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastSubtract (FDFVector2 Lhs, float Rhs)     { return DFFastSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastSubtract (float2 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastSubtract (float2 Lhs, float Rhs) { return DFFastSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
struct FDFVector3
{
	float3 High;
	float3 Low;
};
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }
float3 DFDemote(FDFVector3 Value) { return Value.High + Value.Low; }
float3 DFDemote(float3 Value) { return Value; }
FDFVector3 DFNegate(FDFVector3 Value)
{
	return MakeDFVector3(-Value.High, -Value.Low);
}
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);
}
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);
}
FDFVector3 DFFastAdd(float3 Lhs, float3 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector3 DFFastAdd(FDFVector3 Lhs, FDFVector3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector3 DFFastAdd(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs);
	S.Low += Lhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector3 DFFastAdd(float3 Lhs, FDFVector3 Rhs) { return DFFastAdd(Rhs, Lhs); }
FDFVector3 DFFastSubtract(float3 Lhs, float3 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector3 DFFastSubtract(FDFVector3 Lhs, FDFVector3 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
FDFVector3 DFFastSubtract(FDFVector3 Lhs, float3 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector3 DFFastSubtract(float3 Lhs, FDFVector3 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float3 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, float3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(float3 Lhs, FDFVector3 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{
	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);
}
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}
FDFVector3  DFFastAdd (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastAdd (float Lhs, FDFVector3 Rhs) { return DFFastAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastAdd (FDFScalar Lhs, float3 Rhs) { return DFFastAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastAdd (float Lhs, float3 Rhs) { return DFFastAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastAdd (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastAdd (FDFVector3 Lhs, float Rhs)     { return DFFastAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastAdd (float3 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastAdd (float3 Lhs, float Rhs) { return DFFastAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastSubtract (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastSubtract (float Lhs, FDFVector3 Rhs) { return DFFastSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastSubtract (FDFScalar Lhs, float3 Rhs) { return DFFastSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastSubtract (float Lhs, float3 Rhs) { return DFFastSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastSubtract (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastSubtract (FDFVector3 Lhs, float Rhs)     { return DFFastSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastSubtract (float3 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastSubtract (float3 Lhs, float Rhs) { return DFFastSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
struct FDFVector4
{
	float4 High;
	float4 Low;
};
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }
float4 DFDemote(FDFVector4 Value) { return Value.High + Value.Low; }
float4 DFDemote(float4 Value) { return Value; }
FDFVector4 DFNegate(FDFVector4 Value)
{
	return MakeDFVector4(-Value.High, -Value.Low);
}
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);
}
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);
}
FDFVector4 DFFastAdd(float4 Lhs, float4 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector4 DFFastAdd(FDFVector4 Lhs, FDFVector4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	S.Low += Lhs.Low + Rhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector4 DFFastAdd(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs);
	S.Low += Lhs.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector4 DFFastAdd(float4 Lhs, FDFVector4 Rhs) { return DFFastAdd(Rhs, Lhs); }
FDFVector4 DFFastSubtract(float4 Lhs, float4 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector4 DFFastSubtract(FDFVector4 Lhs, FDFVector4 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
FDFVector4 DFFastSubtract(FDFVector4 Lhs, float4 Rhs) { return DFFastAdd(Lhs, -Rhs); }
FDFVector4 DFFastSubtract(float4 Lhs, FDFVector4 Rhs) { return DFFastAdd(Lhs, DFNegate(Rhs)); }
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float4 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, float4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(float4 Lhs, FDFVector4 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{
	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);
}
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}
FDFVector4  DFFastAdd (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastAdd (float Lhs, FDFVector4 Rhs) { return DFFastAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastAdd (FDFScalar Lhs, float4 Rhs) { return DFFastAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastAdd (float Lhs, float4 Rhs) { return DFFastAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastAdd (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastAdd (FDFVector4 Lhs, float Rhs)     { return DFFastAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastAdd (float4 Lhs, FDFScalar Rhs) { return DFFastAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastAdd (float4 Lhs, float Rhs) { return DFFastAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastSubtract (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastSubtract (float Lhs, FDFVector4 Rhs) { return DFFastSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastSubtract (FDFScalar Lhs, float4 Rhs) { return DFFastSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastSubtract (float Lhs, float4 Rhs) { return DFFastSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastSubtract (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastSubtract (FDFVector4 Lhs, float Rhs)     { return DFFastSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastSubtract (float4 Lhs, FDFScalar Rhs) { return DFFastSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastSubtract (float4 Lhs, float Rhs) { return DFFastSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};
float4x4 Make4x3Matrix(float4x4 M)
{
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}
FDFMatrix MakeDFMatrix4x3(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 
	int Dummy; 
};
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FDFInverseMatrix MakeDFInverseMatrix4x3(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);
	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;
	Result[3].xyz += Translation;
	return Result;
}
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }
float4x4 DFDemote(FDFMatrix V)
{
	return MultiplyTranslation(V.M, V.PostTranslation);
}
float4x4 DFDemote(float4x4 V)
{
	return V;
}
float4x4 DFDemote(FDFInverseMatrix V)
{
	return MultiplyTranslation(-V.PreTranslation, V.M);
}
FDFVector3 DFMultiplyLHSAndFastTwoSum(float3 Lhs, float Factor, float3 Rhs)
{
	const float3 S =  MakePrecise(  mad( Lhs , Factor , Rhs ) );
	const float3 E =  MakePrecise( Rhs -  mad( -Lhs , Factor , S ) );
	return MakeDFVector3(S, E);
}
struct FLWCScalar
{
	float Tile;
	float Offset;
	int Dummy; 
};
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
	int Dummy; 
};
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
	int Dummy; 
};
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
	int Dummy; 
};
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
	int2 Dummy; 
};
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int3 Dummy; 
};
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	Result.Dummy = 0;
	return Result;
}
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}
FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }
FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}
float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }
FLWCScalar DFToTileOffset( FDFScalar In)																								{ float Tile =  MakePrecise( round(In.High / 2097152.00f) ); float Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFToTileOffset( FDFVector2 In)																								{ float2 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float2 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFToTileOffset( FDFVector3 In)																								{ float3 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float3 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFToTileOffset( FDFVector4 In)																								{ float4 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float4 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector4 (Tile, Offset);																						}
FLWCScalar DFFastToTileOffset( FDFScalar In)																							{ float Tile = In.High * (1 / 2097152.00f); float Offset = In.Low; 																																																									return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFFastToTileOffset( FDFVector2 In)																							{ float2 Tile = In.High * (1 / 2097152.00f); float2 Offset = In.Low; 																																																									return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFFastToTileOffset( FDFVector3 In)																							{ float3 Tile = In.High * (1 / 2097152.00f); float3 Offset = In.Low; 																																																									return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFFastToTileOffset( FDFVector4 In)																							{ float4 Tile = In.High * (1 / 2097152.00f); float4 Offset = In.Low; 																																																									return MakeLWCVector4 (Tile, Offset);																						}
FLWCMatrix DFToTileOffset(FDFMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PostTranslation, 0));
	float4x4 M = MultiplyTranslation(In.M, PosHigh.Offset);
	float3 Tile = PosHigh.Tile;
	return MakeLWCMatrix(Tile, M);
}
FLWCMatrix DFFastToTileOffset(FDFMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PostTranslation / 2097152.00f;
	return MakeLWCMatrix(Tile, M);
}
FLWCInverseMatrix DFToTileOffset(FDFInverseMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PreTranslation, 0));
	float4x4 M = MultiplyTranslation(-PosHigh.Offset, In.M);
	float3 Tile = PosHigh.Tile;
	return MakeLWCInverseMatrix(Tile, M);
}
FLWCInverseMatrix DFFastToTileOffset(FDFInverseMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PreTranslation / 2097152.00f;
	return MakeLWCInverseMatrix(Tile, M);
}
FDFScalar DFFromTileOffset(FLWCScalar In)
{
	float TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector2 DFFromTileOffset(FLWCVector2 In)
{
	float2 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector3 DFFromTileOffset(FLWCVector3 In)
{
	float3 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector4 DFFromTileOffset(FLWCVector4 In)
{
	float4 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFMatrix DFFromTileOffset(FLWCMatrix In)
{
	float4x4 M = In.M;
	float3 PostTranslation = In.Tile * 2097152.00f;
	return MakeDFMatrix(PostTranslation, M);
}
FDFInverseMatrix DFFromTileOffset(FLWCInverseMatrix In)
{
	float4x4 M = In.M;
	float3 PreTranslation = -In.Tile * 2097152.00f;
	return MakeDFInverseMatrix(PreTranslation, M);
}
float LWCToFloat(FDFScalar Value)   { return DFDemote(Value); }
float2 LWCToFloat(FDFVector2 Value) { return DFDemote(Value); }
float3 LWCToFloat(FDFVector3 Value) { return DFDemote(Value); }
float4 LWCToFloat(FDFVector4 Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFMatrix Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFInverseMatrix Value) { return DFDemote(Value); }
struct FViewConstants {
	 float4x4    TranslatedWorldToClip ;
	 float4x4    RelativeWorldToClip ;
	 float4x4    ClipToRelativeWorld ;
	 float4x4    TranslatedWorldToView ;
	 float4x4    ViewToTranslatedWorld ;
	 float4x4    TranslatedWorldToCameraView ;
	 float4x4    CameraViewToTranslatedWorld ;
	 float4x4    ViewToClip ;
	 float4x4    ViewToClipNoAA ;
	 float4x4    ClipToView ;
	 float4x4    ClipToTranslatedWorld ;
	 float4x4    SVPositionToTranslatedWorld ;
	 float4x4    ScreenToRelativeWorld ;
	 float4x4    ScreenToTranslatedWorld ;
	 float4x4    MobileMultiviewShadowTransform ;
	 float3    ViewOriginHigh ;
	 float    Padding972 ;
	 float3    ViewForward ;
	 float    Padding988 ;
	 float3    ViewUp ;
	 float    Padding1004 ;
	 float3    ViewRight ;
	 float    Padding1020 ;
	 float3    HMDViewNoRollUp ;
	 float    Padding1036 ;
	 float3    HMDViewNoRollRight ;
	 float    Padding1052 ;
	 float4    InvDeviceZToWorldZTransform ;
	 float4    ScreenPositionScaleBias ;
	 float3    ViewOriginLow ;
	 float    Padding1100 ;
	 float3    TranslatedWorldCameraOrigin ;
	 float    Padding1116 ;
	 float3    WorldViewOriginHigh ;
	 float    Padding1132 ;
	 float3    WorldViewOriginLow ;
	 float    Padding1148 ;
	 float3    PreViewTranslationHigh ;
	 float    Padding1164 ;
	 float3    PreViewTranslationLow ;
	 float    Padding1180 ;
	 float4x4    PrevViewToClip ;
	 float4x4    PrevClipToView ;
	 float4x4    PrevTranslatedWorldToClip ;
	 float4x4    PrevTranslatedWorldToView ;
	 float4x4    PrevViewToTranslatedWorld ;
	 float4x4    PrevTranslatedWorldToCameraView ;
	 float4x4    PrevCameraViewToTranslatedWorld ;
	 float3    PrevTranslatedWorldCameraOrigin ;
	 float    Padding1644 ;
	 float3    PrevWorldCameraOriginHigh ;
	 float    Padding1660 ;
	 float3    PrevWorldCameraOriginLow ;
	 float    Padding1676 ;
	 float3    PrevWorldViewOriginHigh ;
	 float    Padding1692 ;
	 float3    PrevWorldViewOriginLow ;
	 float    Padding1708 ;
	 float3    PrevPreViewTranslationHigh ;
	 float    Padding1724 ;
	 float3    PrevPreViewTranslationLow ;
	 float    Padding1740 ;
	 float3    ViewTilePosition ;
	 float    Padding1756 ;
	 float3    RelativeWorldCameraOriginTO ;
	 float    Padding1772 ;
	 float3    RelativeWorldViewOriginTO ;
	 float    Padding1788 ;
	 float3    RelativePreViewTranslationTO ;
	 float    Padding1804 ;
	 float3    PrevRelativeWorldCameraOriginTO ;
	 float    Padding1820 ;
	 float3    PrevRelativeWorldViewOriginTO ;
	 float    Padding1836 ;
	 float3    RelativePrevPreViewTranslationTO ;
	 float    Padding1852 ;
	 float4x4    PrevClipToRelativeWorld ;
	 float4x4    PrevScreenToTranslatedWorld ;
	 float4x4    ClipToPrevClip ;
	 float4x4    ClipToPrevClipWithAA ;
	 float4    TemporalAAJitter ;
	 float4    GlobalClippingPlane ;
	 float2    FieldOfViewWideAngles ;
	 float2    PrevFieldOfViewWideAngles ;
	 float4    ViewRectMin ;
	 float4    ViewSizeAndInvSize ;
	 uint4    ViewRectMinAndSize ;
	 float4    LightProbeSizeRatioAndInvSizeRatio ;
	 float4    BufferSizeAndInvSize ;
	 float4    BufferBilinearUVMinMax ;
	 float4    ScreenToViewSpace ;
	 float2    BufferToSceneTextureScale ;
	 float2    ResolutionFractionAndInv ;
	 int    NumSceneColorMSAASamples ;
	 float    ProjectionDepthThicknessScale ;
	 float    PreExposure ;
	 float    OneOverPreExposure ;
	 float4    DiffuseOverrideParameter ;
	 float4    SpecularOverrideParameter ;
	 float4    NormalOverrideParameter ;
	 float2    RoughnessOverrideParameter ;
	 float    PrevFrameGameTime ;
	 float    PrevFrameRealTime ;
	 float    OutOfBoundsMask ;
	 float    Padding2372 ;
	 float    Padding2376 ;
	 float    Padding2380 ;
	 float3    WorldCameraMovementSinceLastFrame ;
	 float    CullingSign ;
	 float    NearPlane ;
	 float    GameTime ;
	 float    RealTime ;
	 float    DeltaTime ;
	 float    MaterialTextureMipBias ;
	 float    MaterialTextureDerivativeMultiply ;
	 uint    Random ;
	 uint    FrameNumber ;
	 uint    FrameCounter ;
	 uint    StateFrameIndexMod8 ;
	 uint    StateFrameIndex ;
	 uint    DebugViewModeMask ;
	 uint    WorldIsPaused ;
	 float    CameraCut ;
	 float    UnlitViewmodeMask ;
	 float    Padding2460 ;
	 float4    DirectionalLightColor ;
	 float3    DirectionalLightDirection ;
	 float    Padding2492 ;
	 float4    TranslucencyLightingVolumeMin[2] ;
	 float4    TranslucencyLightingVolumeInvSize[2] ;
	 float4    TemporalAAParams ;
	 float4    CircleDOFParams ;
	 float    DepthOfFieldSensorWidth ;
	 float    DepthOfFieldFocalDistance ;
	 float    DepthOfFieldScale ;
	 float    DepthOfFieldFocalLength ;
	 float    DepthOfFieldFocalRegion ;
	 float    DepthOfFieldNearTransitionRegion ;
	 float    DepthOfFieldFarTransitionRegion ;
	 float    MotionBlurNormalizedToPixel ;
	 float    GeneralPurposeTweak ;
	 float    GeneralPurposeTweak2 ;
	 float    DemosaicVposOffset ;
	 float    DecalDepthBias ;
	 float3    IndirectLightingColorScale ;
	 float    Padding2652 ;
	 float3    PrecomputedIndirectLightingColorScale ;
	 float    Padding2668 ;
	 float3    PrecomputedIndirectSpecularColorScale ;
	 float    Padding2684 ;
	 float4    AtmosphereLightDirection[2] ;
	 float4    AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    AtmosphereLightDiscLuminance[2] ;
	 float4    AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    SkyViewLutSizeAndInvSize ;
	 float3    SkyCameraTranslatedWorldOrigin ;
	 float    Padding2876 ;
	 float4    SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    SkyViewLutReferential ;
	 float4    SkyAtmosphereSkyLuminanceFactor ;
	 float    SkyAtmospherePresentInScene ;
	 float    SkyAtmosphereHeightFogContribution ;
	 float    SkyAtmosphereBottomRadiusKm ;
	 float    SkyAtmosphereTopRadiusKm ;
	 float4    SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    Padding3032 ;
	 float    Padding3036 ;
	 float3    NormalCurvatureToRoughnessScaleBias ;
	 float    RenderingReflectionCaptureMask ;
	 float    RealTimeReflectionCapture ;
	 float    RealTimeReflectionCapturePreExposure ;
	 float    Padding3064 ;
	 float    Padding3068 ;
	 float4    AmbientCubemapTint ;
	 float    AmbientCubemapIntensity ;
	 float    SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    SkyLightAffectReflectionFlag ;
	 float    SkyLightAffectGlobalIlluminationFlag ;
	 float4    SkyLightColor ;
	 float    SkyLightVolumetricScatteringIntensity ;
	 float    Padding3124 ;
	 float    Padding3128 ;
	 float    Padding3132 ;
	 float4    MobileSkyIrradianceEnvironmentMap[8] ;
	 float    MobilePreviewMode ;
	 float    HMDEyePaddingOffset ;
	 float    ReflectionCubemapMaxMip ;
	 float    ShowDecalsMask ;
	 uint    DistanceFieldAOSpecularOcclusionMode ;
	 float    IndirectCapsuleSelfShadowingIntensity ;
	 float    Padding3288 ;
	 float    Padding3292 ;
	 float3    ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    StereoPassIndex ;
	 float4    GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    GlobalDistanceFieldMipFactor ;
	 float    GlobalDistanceFieldMipTransition ;
	 int    GlobalDistanceFieldClipmapSizeInPages ;
	 int    Padding3708 ;
	 float3    GlobalDistanceFieldInvPageAtlasSize ;
	 float    Padding3724 ;
	 float3    GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    GlobalVolumeDimension ;
	 float    GlobalVolumeTexelSize ;
	 float    MaxGlobalDFAOConeDistance ;
	 uint    NumGlobalSDFClipmaps ;
	 float    CoveredExpandSurfaceScale ;
	 float    NotCoveredExpandSurfaceScale ;
	 float    NotCoveredMinStepScale ;
	 float    DitheredTransparencyStepThreshold ;
	 float    DitheredTransparencyTraceThreshold ;
	 int2    CursorPosition ;
	 float    bCheckerboardSubsurfaceProfileRendering ;
	 float    Padding3788 ;
	 float3    VolumetricFogInvGridSize ;
	 float    Padding3804 ;
	 float3    VolumetricFogGridZParams ;
	 float    Padding3820 ;
	 float2    VolumetricFogSVPosToVolumeUV ;
	 float2    VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    VolumetricFogPrevUVMax ;
	 float2    VolumetricFogPrevUVMaxForTemporalBlend ;
	 float2    VolumetricFogScreenToResourceUV ;
	 float2    VolumetricFogUVMax ;
	 float    VolumetricFogMaxDistance ;
	 float    Padding3884 ;
	 float3    VolumetricLightmapWorldToUVScale ;
	 float    Padding3900 ;
	 float3    VolumetricLightmapWorldToUVAdd ;
	 float    Padding3916 ;
	 float3    VolumetricLightmapIndirectionTextureSize ;
	 float    VolumetricLightmapBrickSize ;
	 float3    VolumetricLightmapBrickTexelSize ;
	 float    IndirectLightingCacheShowFlag ;
	 float    EyeToPixelSpreadAngle ;
	 float    Padding3956 ;
	 float    Padding3960 ;
	 float    Padding3964 ;
	 float4    XRPassthroughCameraUVs[2] ;
	 float    GlobalVirtualTextureMipBias ;
	 uint    VirtualTextureFeedbackShift ;
	 uint    VirtualTextureFeedbackMask ;
	 uint    VirtualTextureFeedbackStride ;
	 uint    VirtualTextureFeedbackJitterOffset ;
	 uint    VirtualTextureFeedbackSampleOffset ;
	 uint    Padding4024 ;
	 uint    Padding4028 ;
	 float4    RuntimeVirtualTextureMipLevel ;
	 float2    RuntimeVirtualTexturePackHeight ;
	 float    Padding4056 ;
	 float    Padding4060 ;
	 float4    RuntimeVirtualTextureDebugParams ;
	 int    FarShadowStaticMeshLODBias ;
	 float    MinRoughness ;
	 float    Padding4088 ;
	 float    Padding4092 ;
	 float4    HairRenderInfo ;
	 uint    EnableSkyLight ;
	 uint    HairRenderInfoBits ;
	 uint    HairComponents ;
	 float    bSubsurfacePostprocessEnabled ;
	 float4    SSProfilesTextureSizeAndInvSize ;
	 float4    SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    SpecularProfileTextureSizeAndInvSize ;
	 float3    PhysicsFieldClipmapCenter ;
	 float    PhysicsFieldClipmapDistance ;
	 int    PhysicsFieldClipmapResolution ;
	 int    PhysicsFieldClipmapExponent ;
	 int    PhysicsFieldClipmapCount ;
	 int    PhysicsFieldTargetCount ;
	 int4    PhysicsFieldTargets[32] ;
	 uint    GPUSceneViewId ;
	 float    ViewResolutionFraction ;
	 float    SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    Padding4732 ;
	 float4    TanAndInvTanHalfFOV ;
	 float4    PrevTanAndInvTanHalfFOV ;
	 float2    WorldDepthToPixelWorldRadius ;
	 float    Padding4776 ;
	 float    Padding4780 ;
	 float4    ScreenRayLengthMultiplier ;
	 float4    GlintLUTParameters0 ;
	 float4    GlintLUTParameters1 ;
	 int4    EnvironmentComponentsFlags ;
	 uint    BindlessSampler_MaterialTextureBilinearWrapedSampler ;
	 uint    Padding4852 ;
	 uint    BindlessSampler_MaterialTextureBilinearClampedSampler ;
	 uint    Padding4860 ;
	 uint    BindlessSRV_VolumetricLightmapIndirectionTexture ;
	 uint    Padding4868 ;
	 uint    BindlessSRV_VolumetricLightmapBrickAmbientVector ;
	 uint    Padding4876 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    Padding4884 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    Padding4892 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    Padding4900 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    Padding4908 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    Padding4916 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    Padding4924 ;
	 uint    BindlessSRV_SkyBentNormalBrickTexture ;
	 uint    Padding4932 ;
	 uint    BindlessSRV_DirectionalLightShadowingBrickTexture ;
	 uint    Padding4940 ;
	 uint    BindlessSampler_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    Padding4948 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler0 ;
	 uint    Padding4956 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler1 ;
	 uint    Padding4964 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler2 ;
	 uint    Padding4972 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler3 ;
	 uint    Padding4980 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler4 ;
	 uint    Padding4988 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler5 ;
	 uint    Padding4996 ;
	 uint    BindlessSampler_SkyBentNormalTextureSampler ;
	 uint    Padding5004 ;
	 uint    BindlessSampler_DirectionalLightShadowingTextureSampler ;
	 uint    Padding5012 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageAtlasTexture ;
	 uint    Padding5020 ;
	 uint    BindlessSRV_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    Padding5028 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageTableTexture ;
	 uint    Padding5036 ;
	 uint    BindlessSRV_GlobalDistanceFieldMipTexture ;
	 uint    Padding5044 ;
	 uint    BindlessSampler_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    Padding5052 ;
	 uint    BindlessSampler_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    Padding5060 ;
	 uint    BindlessSampler_GlobalDistanceFieldMipTextureSampler ;
	 uint    Padding5068 ;
	 uint    BindlessSRV_AtmosphereTransmittanceTexture ;
	 uint    Padding5076 ;
	 uint    BindlessSampler_AtmosphereTransmittanceTextureSampler ;
	 uint    Padding5084 ;
	 uint    BindlessSRV_AtmosphereIrradianceTexture ;
	 uint    Padding5092 ;
	 uint    BindlessSampler_AtmosphereIrradianceTextureSampler ;
	 uint    Padding5100 ;
	 uint    BindlessSRV_AtmosphereInscatterTexture ;
	 uint    Padding5108 ;
	 uint    BindlessSampler_AtmosphereInscatterTextureSampler ;
	 uint    Padding5116 ;
	 uint    BindlessSRV_PerlinNoiseGradientTexture ;
	 uint    Padding5124 ;
	 uint    BindlessSampler_PerlinNoiseGradientTextureSampler ;
	 uint    Padding5132 ;
	 uint    BindlessSRV_PerlinNoise3DTexture ;
	 uint    Padding5140 ;
	 uint    BindlessSampler_PerlinNoise3DTextureSampler ;
	 uint    Padding5148 ;
	 uint    BindlessSRV_SobolSamplingTexture ;
	 uint    Padding5156 ;
	 uint    BindlessSampler_SharedPointWrappedSampler ;
	 uint    Padding5164 ;
	 uint    BindlessSampler_SharedPointClampedSampler ;
	 uint    Padding5172 ;
	 uint    BindlessSampler_SharedBilinearWrappedSampler ;
	 uint    Padding5180 ;
	 uint    BindlessSampler_SharedBilinearClampedSampler ;
	 uint    Padding5188 ;
	 uint    BindlessSampler_SharedBilinearAnisoClampedSampler ;
	 uint    Padding5196 ;
	 uint    BindlessSampler_SharedTrilinearWrappedSampler ;
	 uint    Padding5204 ;
	 uint    BindlessSampler_SharedTrilinearClampedSampler ;
	 uint    Padding5212 ;
	 uint    BindlessSRV_PreIntegratedBRDF ;
	 uint    Padding5220 ;
	 uint    BindlessSampler_PreIntegratedBRDFSampler ;
	 uint    Padding5228 ;
	 uint    BindlessSRV_SkyIrradianceEnvironmentMap ;
	 uint    Padding5236 ;
	 uint    BindlessSRV_TransmittanceLutTexture ;
	 uint    Padding5244 ;
	 uint    BindlessSampler_TransmittanceLutTextureSampler ;
	 uint    Padding5252 ;
	 uint    BindlessSRV_SkyViewLutTexture ;
	 uint    Padding5260 ;
	 uint    BindlessSampler_SkyViewLutTextureSampler ;
	 uint    Padding5268 ;
	 uint    BindlessSRV_DistantSkyLightLutTexture ;
	 uint    Padding5276 ;
	 uint    BindlessSampler_DistantSkyLightLutTextureSampler ;
	 uint    Padding5284 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolume ;
	 uint    Padding5292 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeSampler ;
	 uint    Padding5300 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    Padding5308 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    Padding5316 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    Padding5324 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    Padding5332 ;
	 uint    BindlessSRV_HairScatteringLUTTexture ;
	 uint    Padding5340 ;
	 uint    BindlessSampler_HairScatteringLUTSampler ;
	 uint    Padding5348 ;
	 uint    BindlessSRV_GGXLTCMatTexture ;
	 uint    Padding5356 ;
	 uint    BindlessSampler_GGXLTCMatSampler ;
	 uint    Padding5364 ;
	 uint    BindlessSRV_GGXLTCAmpTexture ;
	 uint    Padding5372 ;
	 uint    BindlessSampler_GGXLTCAmpSampler ;
	 uint    Padding5380 ;
	 uint    BindlessSRV_SheenLTCTexture ;
	 uint    Padding5388 ;
	 uint    BindlessSampler_SheenLTCSampler ;
	 uint    Padding5396 ;
	 uint    bShadingEnergyConservation ;
	 uint    bShadingEnergyPreservation ;
	 uint    BindlessSRV_ShadingEnergyGGXSpecTexture ;
	 uint    Padding5412 ;
	 uint    BindlessSRV_ShadingEnergyGGXGlassTexture ;
	 uint    Padding5420 ;
	 uint    BindlessSRV_ShadingEnergyClothSpecTexture ;
	 uint    Padding5428 ;
	 uint    BindlessSRV_ShadingEnergyDiffuseTexture ;
	 uint    Padding5436 ;
	 uint    BindlessSampler_ShadingEnergySampler ;
	 uint    Padding5444 ;
	 uint    BindlessSRV_GlintTexture ;
	 uint    Padding5452 ;
	 uint    BindlessSampler_GlintSampler ;
	 uint    Padding5460 ;
	 uint    BindlessSRV_SimpleVolumeTexture ;
	 uint    Padding5468 ;
	 uint    BindlessSampler_SimpleVolumeTextureSampler ;
	 uint    Padding5476 ;
	 uint    BindlessSRV_SimpleVolumeEnvTexture ;
	 uint    Padding5484 ;
	 uint    BindlessSampler_SimpleVolumeEnvTextureSampler ;
	 uint    Padding5492 ;
	 uint    BindlessSRV_SSProfilesTexture ;
	 uint    Padding5500 ;
	 uint    BindlessSampler_SSProfilesSampler ;
	 uint    Padding5508 ;
	 uint    BindlessSampler_SSProfilesTransmissionSampler ;
	 uint    Padding5516 ;
	 uint    BindlessSRV_SSProfilesPreIntegratedTexture ;
	 uint    Padding5524 ;
	 uint    BindlessSampler_SSProfilesPreIntegratedSampler ;
	 uint    Padding5532 ;
	 uint    BindlessSRV_SpecularProfileTexture ;
	 uint    Padding5540 ;
	 uint    BindlessSampler_SpecularProfileSampler ;
	 uint    Padding5548 ;
	 uint    BindlessSRV_WaterIndirection ;
	 uint    Padding5556 ;
	 uint    BindlessSRV_WaterData ;
	 uint    Padding5564 ;
	 float4    RectLightAtlasSizeAndInvSize ;
	 float    RectLightAtlasMaxMipLevel ;
	 float    Padding5588 ;
	 uint    BindlessSRV_RectLightAtlasTexture ;
	 uint    Padding5596 ;
	 uint    BindlessSampler_RectLightAtlasSampler ;
	 uint    Padding5604 ;
	 uint    Padding5608 ;
	 uint    Padding5612 ;
	 float4    IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_IESAtlasTexture ;
	 uint    Padding5636 ;
	 uint    BindlessSampler_IESAtlasSampler ;
	 uint    Padding5644 ;
	 uint    BindlessSampler_LandscapeWeightmapSampler ;
	 uint    Padding5652 ;
	 uint    BindlessSRV_LandscapeIndirection ;
	 uint    Padding5660 ;
	 uint    BindlessSRV_LandscapePerComponentData ;
	 uint    Padding5668 ;
	 uint    BindlessUAV_VTFeedbackBuffer ;
	 uint    Padding5676 ;
	 uint    BindlessSRV_PhysicsFieldClipmapBuffer ;
	 uint    Padding5684 ;
	 uint    Padding5688 ;
	 uint    Padding5692 ;
	 float3    TLASPreViewTranslationHigh ;
	 float    Padding5708 ;
	 float3    TLASPreViewTranslationLow ;
 };
ConstantBuffer<FViewConstants> View;
SamplerState  View_SharedBilinearClampedSampler;
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;
Texture2D  View_TransmittanceLutTexture;
SamplerState  View_TransmittanceLutTextureSampler;
Texture2D  View_DistantSkyLightLutTexture;
SamplerState  View_DistantSkyLightLutTextureSampler;
Texture3D  View_CameraAerialPerspectiveVolume;
SamplerState  View_CameraAerialPerspectiveVolumeSampler;
Texture3D  View_CameraAerialPerspectiveVolumeMieOnly;
SamplerState  View_CameraAerialPerspectiveVolumeMieOnlySampler;
Texture3D  View_CameraAerialPerspectiveVolumeRayOnly;
SamplerState  View_CameraAerialPerspectiveVolumeRayOnlySampler;
struct FPrimitiveConstants {
	 uint    Flags ;
	 uint    InstanceSceneDataOffset ;
	 uint    NumInstanceSceneDataEntries ;
	 int    SingleCaptureIndex ;
	 float3    PositionHigh ;
	 uint    PrimitiveComponentId ;
	 float4x4    LocalToRelativeWorld ;
	 float4x4    RelativeWorldToLocal ;
	 float4x4    PreviousLocalToRelativeWorld ;
	 float4x4    PreviousRelativeWorldToLocal ;
	 float4x4    WorldToPreviousWorld ;
	 float3    InvNonUniformScale ;
	 float    ObjectBoundsX ;
	 float4    ObjectWorldPositionHighAndRadius ;
	 float3    ObjectWorldPositionLow ;
	 float    MinMaterialDisplacement ;
	 float3    ActorWorldPositionHigh ;
	 float    MaxMaterialDisplacement ;
	 float3    ActorWorldPositionLow ;
	 uint    LightmapUVIndex ;
	 float3    ObjectOrientation ;
	 uint    LightmapDataIndex ;
	 float4    NonUniformScale ;
	 float3    PreSkinnedLocalBoundsMin ;
	 uint    NaniteResourceID ;
	 float3    PreSkinnedLocalBoundsMax ;
	 uint    NaniteHierarchyOffset ;
	 float3    LocalObjectBoundsMin ;
	 float    ObjectBoundsY ;
	 float3    LocalObjectBoundsMax ;
	 float    ObjectBoundsZ ;
	 float3    InstanceLocalBoundsCenter ;
	 uint    InstancePayloadDataOffset ;
	 float3    InstanceLocalBoundsExtent ;
	 uint    InstancePayloadDataStride ;
	 uint    InstancePayloadExtensionSize ;
	 uint    Padding564 ;
	 float2    WireframeAndPrimitiveColor ;
	 uint    PackedNaniteFlags ;
	 int    PersistentPrimitiveIndex ;
	 float2    InstanceDrawDistanceMinMaxSquared ;
	 float    InstanceWPODisableDistanceSquared ;
	 uint    NaniteRayTracingDataOffset ;
	 float    MaxWPOExtent ;
	 uint    CustomStencilValueAndMask ;
	 uint    VisibilityFlags ;
	 uint    Padding612 ;
	 uint    Padding616 ;
	 uint    Padding620 ;
	 float4    CustomPrimitiveData[9] ;
 };
ConstantBuffer<FPrimitiveConstants> Primitive;
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;
struct FVirtualShadowMapConstants {
	 uint    NumFullShadowMaps ;
	 uint    NumSinglePageShadowMaps ;
	 uint    MaxPhysicalPages ;
	 uint    NumShadowMapSlots ;
	 uint    StaticCachedArrayIndex ;
	 uint    PhysicalPageRowMask ;
	 uint    PhysicalPageRowShift ;
	 uint    PackedShadowMaskMaxLightCount ;
	 float4    RecPhysicalPoolSize ;
	 int2    PhysicalPoolSize ;
	 int2    PhysicalPoolSizePages ;
	 uint    bExcludeNonNaniteFromCoarsePages ;
	 float    CoarsePagePixelThresholdDynamic ;
	 float    CoarsePagePixelThresholdStatic ;
	 float    CoarsePagePixelThresholdDynamicNanite ;
	 uint    SceneFrameNumber ;
	 uint    bClipmapGreedyLevelSelection ;
	 float    GlobalResolutionLodBias ;
	 float    Padding92 ;
	 uint    BindlessSRV_ProjectionData ;
	 uint    Padding100 ;
	 uint    BindlessSRV_PageTable ;
	 uint    Padding108 ;
	 uint    BindlessSRV_PageFlags ;
	 uint    Padding116 ;
	 uint    BindlessSRV_PageRectBounds ;
	 uint    Padding124 ;
	 uint    BindlessSRV_PhysicalPagePool ;
	 uint    Padding132 ;
	 uint    BindlessSRV_CachePrimitiveAsDynamic ;
	 uint    Padding140 ;
	 uint    BindlessSRV_LightGridData ;
	 uint    Padding148 ;
	 uint    BindlessSRV_NumCulledLightsGrid ;
 };
ConstantBuffer<FVirtualShadowMapConstants> VirtualShadowMap;
ByteAddressBuffer  VirtualShadowMap_ProjectionData;
StructuredBuffer<uint>  VirtualShadowMap_PageTable;
Texture2DArray<uint>  VirtualShadowMap_PhysicalPagePool;
struct FRenderVolumetricCloudParametersConstants {
	 float4    GroundAlbedo ;
	 float3    CloudLayerCenterKm ;
	 float    PlanetRadiusKm ;
	 float    BottomRadiusKm ;
	 float    TopRadiusKm ;
	 float    TracingStartDistanceFromCamera ;
	 float    TracingStartMaxDistance ;
	 int    TracingMaxDistanceMode ;
	 float    TracingMaxDistance ;
	 int    SampleCountMin ;
	 int    SampleCountMax ;
	 float    InvDistanceToSampleCountMax ;
	 int    ShadowSampleCountMax ;
	 float    ShadowTracingMaxDistance ;
	 float    StopTracingTransmittanceThreshold ;
	 float    SkyLightCloudBottomVisibility ;
	 float    Padding84 ;
	 float    Padding88 ;
	 float    Padding92 ;
	 float4    AtmosphericLightCloudScatteredLuminanceScale[2] ;
	 float4    CloudShadowmapFarDepthKm[2] ;
	 float4    CloudShadowmapStrength[2] ;
	 float4    CloudShadowmapDepthBias[2] ;
	 float4    CloudShadowmapSampleCount[2] ;
	 float4    CloudShadowmapSizeInvSize[2] ;
	 float4    CloudShadowmapTracingSizeInvSize[2] ;
	 float4x4    CloudShadowmapTranslatedWorldToLightClipMatrix[2] ;
	 float4x4    CloudShadowmapTranslatedWorldToLightClipMatrixInv[2] ;
	 float4    CloudShadowmapTracingPixelScaleOffset[2] ;
	 float4    CloudShadowmapLightDir[2] ;
	 float4    CloudShadowmapLightPos[2] ;
	 float4    CloudShadowmapLightAnchorPos[2] ;
	 float    CloudSkyAOFarDepthKm ;
	 float    CloudSkyAOStrength ;
	 float    CloudSkyAOSampleCount ;
	 float    Padding716 ;
	 float4    CloudSkyAOSizeInvSize ;
	 float4x4    CloudSkyAOTranslatedWorldToLightClipMatrix ;
	 float4x4    CloudSkyAOTranslatedWorldToLightClipMatrixInv ;
	 float3    CloudSkyAOTraceDir ;
	 float    Padding876 ;
	 uint    BindlessSRV_SceneTextures_SceneColorTexture ;
	 uint    Padding884 ;
	 uint    BindlessSRV_SceneTextures_SceneDepthTexture ;
	 uint    Padding892 ;
	 uint    BindlessSRV_SceneTextures_ScenePartialDepthTexture ;
	 uint    Padding900 ;
	 uint    BindlessSRV_SceneTextures_GBufferATexture ;
	 uint    Padding908 ;
	 uint    BindlessSRV_SceneTextures_GBufferBTexture ;
	 uint    Padding916 ;
	 uint    BindlessSRV_SceneTextures_GBufferCTexture ;
	 uint    Padding924 ;
	 uint    BindlessSRV_SceneTextures_GBufferDTexture ;
	 uint    Padding932 ;
	 uint    BindlessSRV_SceneTextures_GBufferETexture ;
	 uint    Padding940 ;
	 uint    BindlessSRV_SceneTextures_GBufferFTexture ;
	 uint    Padding948 ;
	 uint    BindlessSRV_SceneTextures_GBufferVelocityTexture ;
	 uint    Padding956 ;
	 uint    BindlessSRV_SceneTextures_ScreenSpaceAOTexture ;
	 uint    Padding964 ;
	 uint    BindlessSRV_SceneTextures_CustomDepthTexture ;
	 uint    Padding972 ;
	 uint    BindlessSRV_SceneTextures_CustomStencilTexture ;
	 uint    Padding980 ;
	 uint    BindlessSampler_SceneTextures_PointClampSampler ;
	 float    Padding988 ;
	 uint    BindlessSRV_SceneDepthTexture ;
	 uint    Padding996 ;
	 uint    BindlessSRV_SceneDepthMinAndMaxTexture ;
	 uint    Padding1004 ;
	 uint    BindlessSRV_CloudShadowTexture0 ;
	 uint    Padding1012 ;
	 uint    BindlessSRV_CloudShadowTexture1 ;
	 uint    Padding1020 ;
	 uint    BindlessSampler_CloudBilinearTextureSampler ;
	 float    Padding1028 ;
	 float    Padding1032 ;
	 float    Padding1036 ;
	 float3    TranslatedWorldPosition ;
	 float    InvRadius ;
	 float4x4    TranslatedWorldToShadowMatrix ;
	 float4    ShadowmapMinMax ;
	 float4    DepthBiasParameters ;
	 float4    ShadowInjectParams ;
	 float4    ClippingPlanes[2] ;
	 uint    BindlessSRV_ShadowDepthTexture ;
	 uint    Padding1204 ;
	 uint    BindlessSampler_ShadowDepthTextureSampler ;
	 float    Padding1212 ;
	 uint    BindlessSRV_ShadowDepthCubeTexture ;
	 uint    Padding1220 ;
	 uint    BindlessSRV_ShadowDepthCubeTexture2 ;
	 uint    Padding1228 ;
	 uint    BindlessSampler_ShadowDepthCubeTextureSampler ;
	 uint    Padding1236 ;
	 uint    Padding1240 ;
	 uint    Padding1244 ;
	 float4x4    ShadowViewProjectionMatrices[6] ;
	 float    InvShadowmapResolution ;
	 uint    Padding1636 ;
	 uint    Padding1640 ;
	 uint    Padding1644 ;
	 uint    bStaticallyShadowed ;
	 uint    Padding1652 ;
	 uint    BindlessSRV_StaticShadowDepthTexture ;
	 uint    Padding1660 ;
	 uint    BindlessSampler_StaticShadowDepthTextureSampler ;
	 uint    Padding1668 ;
	 uint    Padding1672 ;
	 uint    Padding1676 ;
	 float4x4    TranslatedWorldToStaticShadowMatrix ;
	 float4    StaticShadowBufferSize ;
	 uint    BindlessSRV_LFV_LocalFogVolumeInstances ;
	 uint    Padding1764 ;
	 uint2    LFV_LocalFogVolumeTileDataTextureResolution ;
	 uint    LFV_LocalFogVolumeInstanceCount ;
	 uint    LFV_LocalFogVolumeTilePixelSize ;
	 float    LFV_LocalFogVolumeMaxDensityIntoVolumetricFog ;
	 uint    LFV_ShouldRenderLocalFogVolumeInVolumetricFog ;
	 float    LFV_GlobalStartDistance ;
	 float    Padding1796 ;
	 float    Padding1800 ;
	 float    Padding1804 ;
	 float4    LFV_HalfResTextureSizeAndInvSize ;
	 float3    LFV_DirectionalLightColor ;
	 float    Padding1836 ;
	 float3    LFV_DirectionalLightDirection ;
	 float    Padding1852 ;
	 uint    BindlessSRV_LFV_LocalFogVolumeTileDataTexture ;
	 uint    Padding1860 ;
	 uint    Padding1864 ;
	 uint    Padding1868 ;
	 int    VirtualShadowMapId0 ;
	 int    Padding1876 ;
	 int    Padding1880 ;
	 int    Padding1884 ;
	 uint4    TracingCoordToZbufferCoordScaleBias ;
	 uint4    TracingCoordToFullResPixelCoordScaleBias ;
	 uint4    SceneDepthTextureMinMaxCoord ;
	 uint    NoiseFrameIndexModPattern ;
	 int    OpaqueIntersectionMode ;
	 uint    VolumetricRenderTargetMode ;
	 uint    CloudDebugViewMode ;
	 uint    IsReflectionRendering ;
	 uint    TraceShadowmap ;
	 float    LocalLightsShadowSampleCount ;
	 float    Padding1964 ;
	 float4    OutputSizeInvSize ;
	 int    StepSizeOnZeroConservativeDensity ;
	 int    EnableAerialPerspectiveSampling ;
	 int    EnableDistantSkyLightSampling ;
	 int    EnableAtmosphericLightsSampling ;
	 int    EnableHeightFog ;
	 float    EmptySpaceSkippingSliceDepth ;
	 float    AerialPerspectiveRayOnlyStartDistanceKm ;
	 float    AerialPerspectiveRayOnlyFadeDistanceKmInv ;
	 float    AerialPerspectiveMieOnlyStartDistanceKm ;
	 float    AerialPerspectiveMieOnlyFadeDistanceKmInv ;
	 float    Padding2024 ;
	 float    Padding2028 ;
	 float4    ExponentialFogParameters ;
	 float4    ExponentialFogParameters2 ;
	 float4    ExponentialFogColorParameter ;
	 float4    ExponentialFogParameters3 ;
	 float4    SkyAtmosphereAmbientContributionColorScale ;
	 float4    InscatteringLightDirection ;
	 float4    DirectionalInscatteringColor ;
	 float2    SinCosInscatteringColorCubemapRotation ;
	 float    Padding2152 ;
	 float    Padding2156 ;
	 float3    FogInscatteringTextureParameters ;
	 float    ApplyVolumetricFog ;
	 float    VolumetricFogStartDistance ;
	 float    VolumetricFogNearFadeInDistanceInv ;
	 uint    BindlessSRV_FogInscatteringColorCubemap ;
	 uint    Padding2188 ;
	 uint    BindlessSampler_FogInscatteringColorSampler ;
	 uint    Padding2196 ;
	 uint    BindlessSRV_IntegratedLightScattering ;
	 uint    Padding2204 ;
	 uint    BindlessSampler_IntegratedLightScatteringSampler ;
	 float    Padding2212 ;
	 float    Padding2216 ;
	 float    Padding2220 ;
	 uint    ForwardLightData_NumLocalLights ;
	 uint    ForwardLightData_NumReflectionCaptures ;
	 uint    ForwardLightData_HasDirectionalLight ;
	 uint    ForwardLightData_NumGridCells ;
	 int3    ForwardLightData_CulledGridSize ;
	 uint    ForwardLightData_MaxCulledLightsPerCell ;
	 uint    ForwardLightData_LightGridPixelSizeShift ;
	 uint    Padding2260 ;
	 uint    Padding2264 ;
	 uint    Padding2268 ;
	 float3    ForwardLightData_LightGridZParams ;
	 float    Padding2284 ;
	 float3    ForwardLightData_DirectionalLightDirection ;
	 float    ForwardLightData_DirectionalLightSourceRadius ;
	 float    ForwardLightData_DirectionalLightSoftSourceRadius ;
	 float    Padding2308 ;
	 float    Padding2312 ;
	 float    Padding2316 ;
	 float3    ForwardLightData_DirectionalLightColor ;
	 float    ForwardLightData_DirectionalLightVolumetricScatteringIntensity ;
	 float    ForwardLightData_DirectionalLightSpecularScale ;
	 uint    ForwardLightData_DirectionalLightShadowMapChannelMask ;
	 float2    ForwardLightData_DirectionalLightDistanceFadeMAD ;
	 uint    ForwardLightData_NumDirectionalLightCascades ;
	 int    ForwardLightData_DirectionalLightVSM ;
	 int    Padding2360 ;
	 int    Padding2364 ;
	 float4    ForwardLightData_CascadeEndDepths ;
	 float4x4    ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4] ;
	 float4    ForwardLightData_DirectionalLightShadowmapMinMax[4] ;
	 float4    ForwardLightData_DirectionalLightShadowmapAtlasBufferSize ;
	 float    ForwardLightData_DirectionalLightDepthBias ;
	 uint    ForwardLightData_DirectionalLightUseStaticShadowing ;
	 uint    ForwardLightData_SimpleLightsEndIndex ;
	 uint    ForwardLightData_ClusteredDeferredSupportedEndIndex ;
	 uint    ForwardLightData_ManyLightsSupportedStartIndex ;
	 uint    Padding2740 ;
	 uint    Padding2744 ;
	 uint    Padding2748 ;
	 float4    ForwardLightData_DirectionalLightStaticShadowBufferSize ;
	 float4x4    ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow ;
	 uint    ForwardLightData_DirectLightingShowFlag ;
	 uint    ForwardLightData_LightFunctionAtlasLightIndex ;
	 float    Padding2840 ;
	 float    Padding2844 ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength ;
	 int    ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount ;
	 int    ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope ;
	 float    ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias ;
	 uint    ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount ;
	 uint    Padding2884 ;
	 uint    Padding2888 ;
	 uint    Padding2892 ;
	 uint    BindlessSRV_ForwardLightData_DirectionalLightShadowmapAtlas ;
	 uint    Padding2900 ;
	 uint    BindlessSampler_ForwardLightData_ShadowmapSampler ;
	 uint    Padding2908 ;
	 uint    BindlessSRV_ForwardLightData_DirectionalLightStaticShadowmap ;
	 uint    Padding2916 ;
	 uint    BindlessSampler_ForwardLightData_StaticShadowmapSampler ;
	 uint    Padding2924 ;
	 uint    BindlessSRV_ForwardLightData_ForwardLocalLightBuffer ;
	 uint    Padding2932 ;
	 uint    BindlessSRV_ForwardLightData_NumCulledLightsGrid ;
	 uint    Padding2940 ;
	 uint    BindlessSRV_ForwardLightData_CulledLightDataGrid32Bit ;
	 uint    Padding2948 ;
	 uint    BindlessSRV_ForwardLightData_CulledLightDataGrid16Bit ;
	 float    Padding2956 ;
	 int3    BlueNoise_Dimensions ;
	 int    Padding2972 ;
	 int3    BlueNoise_ModuloMasks ;
	 int    Padding2988 ;
	 uint    BindlessSRV_BlueNoise_ScalarTexture ;
	 uint    Padding2996 ;
	 uint    BindlessSRV_BlueNoise_Vec2Texture ;
 };
ConstantBuffer<FRenderVolumetricCloudParametersConstants> RenderVolumetricCloudParameters;
TextureCube  RenderVolumetricCloudParameters_ShadowDepthCubeTexture;
SamplerComparisonState  RenderVolumetricCloudParameters_ShadowDepthCubeTextureSampler;
Texture2D  RenderVolumetricCloudParameters_ShadowDepthTexture;
SamplerState  RenderVolumetricCloudParameters_ShadowDepthTextureSampler;
Texture2D  RenderVolumetricCloudParameters_StaticShadowDepthTexture;
SamplerState  RenderVolumetricCloudParameters_StaticShadowDepthTextureSampler;
Buffer<float4>  RenderVolumetricCloudParameters_LFV_LocalFogVolumeInstances;
Texture2DArray<uint>  RenderVolumetricCloudParameters_LFV_LocalFogVolumeTileDataTexture;
TextureCube  RenderVolumetricCloudParameters_FogInscatteringColorCubemap;
SamplerState  RenderVolumetricCloudParameters_FogInscatteringColorSampler;
Texture3D  RenderVolumetricCloudParameters_IntegratedLightScattering;
Texture2D  RenderVolumetricCloudParameters_BlueNoise_ScalarTexture;
Texture2D  RenderVolumetricCloudParameters_SceneDepthTexture;
struct FMaterialConstants {
	 float4    PreshaderBuffer[1] ;
	 uint    BindlessSRV_Texture2D_0 ;
	 uint    Padding20 ;
	 uint    BindlessSampler_Texture2D_0Sampler ;
	 uint    Padding28 ;
	 uint    BindlessSRV_Texture2D_1 ;
	 uint    Padding36 ;
	 uint    BindlessSampler_Texture2D_1Sampler ;
	 uint    Padding44 ;
	 uint    BindlessSRV_Texture2D_2 ;
	 uint    Padding52 ;
	 uint    BindlessSampler_Texture2D_2Sampler ;
	 uint    Padding60 ;
	 uint    BindlessSampler_Wrap_WorldGroupSettings ;
	 uint    Padding68 ;
	 uint    BindlessSampler_Clamp_WorldGroupSettings ;
 };
ConstantBuffer<FMaterialConstants> Material;
Texture2D  Material_Texture2D_0;
SamplerState  Material_Texture2D_0Sampler;
Texture2D  Material_Texture2D_1;
SamplerState  Material_Texture2D_1Sampler;
Texture2D  Material_Texture2D_2;
SamplerState  Material_Texture2D_2Sampler;
SamplerState  Material_Wrap_WorldGroupSettings;
SamplerState  Material_Clamp_WorldGroupSettings;
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	int4 EnvironmentComponentsFlags;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewOriginHigh = View.ViewOriginHigh;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.ViewOriginLow = View.ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View.WorldViewOriginHigh;
	Result.WorldViewOriginLow = View.WorldViewOriginLow;
	Result.PreViewTranslationHigh = View.PreViewTranslationHigh;
	Result.PreViewTranslationLow = View.PreViewTranslationLow;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View.PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View.PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View.PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View.PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View.PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View.PrevPreViewTranslationLow;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View.RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View.RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View.RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View.PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View.PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View.RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View.SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View.VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View.WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View.ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	Result.EnvironmentComponentsFlags = View.EnvironmentComponentsFlags;
	FinalizeViewState(Result);
	return Result;
}
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);
	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);
	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);
}
static ViewState ResolvedView = (ViewState)0.0f;
ViewState ResolveView()
{
	return GetPrimaryView();
}
static float GlobalTextureMipBias = 0;
float ComputeRayConeLod(Texture2D Tex)
{
    return 0.0f;
}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{
	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{
	return Tex.SampleLevel(Sampler, UV.Value, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
}
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 2.980233e-8f) ? 0.0f : pow(Base, Exponent);
}
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}
float FastExp( float x) { return exp2(1.442695f * x); }
float2 FastExp( float2 x) { return exp2(1.442695f * x); }
float3 FastExp( float3 x) { return exp2(1.442695f * x); }
float4 FastExp( float4 x) { return exp2(1.442695f * x); }
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}
float Pow2( float x )
{
	return x*x;
}
float2 Pow2( float2 x )
{
	return x*x;
}
float3 Pow2( float3 x )
{
	return x*x;
}
float4 Pow2( float4 x )
{
	return x*x;
}
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip._44 >= 1.0f;
}
bool IsOrthoProjection(ViewState InView)
{
	return IsOrthoProjection(InView.ViewToClip);
}
bool IsOrthoProjection()
{
	return IsOrthoProjection(View.ViewToClip);
}
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}
float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View.SVPositionToTranslatedWorld);
	return HomWorldPos.xyz / HomWorldPos.w;
}
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);
	return HomWorldPos.xyz / HomWorldPos.w;
}
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);
	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;
	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;
	float2 Intersections = -1;
	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}
	return Intersections;
}
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	return mul(InTangentVector, TangentToWorld);
}
bool GetReflectionCapturePassSwitchState()
{
	return View.RenderingReflectionCaptureMask > 0.0f;
}
float Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}
FLWCScalar DFToWS(FDFScalar In) { return DFToTileOffset(In); }
FLWCScalar DFFastToWS(FDFScalar In) { return DFFastToTileOffset(In); }
FLWCVector2 DFToWS(FDFVector2 In) { return DFToTileOffset(In); }
FLWCVector2 DFFastToWS(FDFVector2 In) { return DFFastToTileOffset(In); }
FLWCVector3 DFToWS(FDFVector3 In) { return DFToTileOffset(In); }
FLWCVector3 DFFastToWS(FDFVector3 In) { return DFFastToTileOffset(In); }
FLWCVector4 DFToWS(FDFVector4 In) { return DFToTileOffset(In); }
FLWCVector4 DFFastToWS(FDFVector4 In) { return DFFastToTileOffset(In); }
FLWCMatrix DFToWS(FDFMatrix In) { return DFToTileOffset(In); }
FLWCMatrix DFFastToWS(FDFMatrix In) { return DFFastToTileOffset(In); }
FLWCInverseMatrix DFToWS(FDFInverseMatrix In) { return DFToTileOffset(In); }
FLWCInverseMatrix DFFastToWS(FDFInverseMatrix In) { return DFFastToTileOffset(In); }
float DFToWS( float In) { return In; }
float2 DFToWS( float2 In) { return In; }
float3 DFToWS( float3 In) { return In; }
float4 DFToWS( float4 In) { return In; }
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };
	return float3x3( TangentX, TangentY, TangentZ );
}
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		PositionHigh;
	uint		PrimitiveComponentId; 
	FDFMatrix	LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix	PreviousLocalToWorld;
	FDFInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FDFVector3	ObjectWorldPosition;
	FDFVector3	ActorWorldPosition;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	FLWCVector3	ObjectWorldPositionTO;
	FLWCVector3	ActorWorldPositionTO;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		PrimitiveColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9u]; 
};
float3 UnpackColorRGB24(float PackedColorFloat)
{
	uint PackedColor = asuint(PackedColorFloat);
	return float3
	(
		float((PackedColor >> 24u) & 0xFF),
		float((PackedColor >> 16u) & 0xFF),
		float((PackedColor >>  8u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};
struct FInstanceSceneData
{
	FDFMatrix LocalToWorld;
	FDFMatrix PrevLocalToWorld;
	FDFInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;
	float    RandomID;
	float4   LightMapAndShadowMapUVBias;
	bool     ValidInstance;
	uint     Flags;
	FInstanceSceneEditorData EditorData;
};
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;
	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];
}
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	uint PrimitiveIndex = PrimitiveId * 42;
	float3 PositionHigh = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;
	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));
	float4 ObjectWorldPositionHighAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);
	float4 ObjectWorldPositionLow			= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);
	float4 ActorWorldPositionHigh	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20);
	float4 ActorWorldPositionLow	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.PositionHigh							= PositionHigh; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeDFMatrix4x3(PositionHigh, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeDFInverseMatrix4x3(PositionHigh, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeDFMatrix4x3(PositionHigh, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeDFInverseMatrix4x3(PositionHigh, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectRadius							= ObjectWorldPositionHighAndRadius.w;
	PrimitiveData.ObjectWorldPositionTO					= MakeLWCVector3(ObjectWorldPositionHighAndRadius.xyz, ObjectWorldPositionLow.xyz);
	PrimitiveData.ActorWorldPositionTO					= MakeLWCVector3(ActorWorldPositionHigh.xyz, ActorWorldPositionLow.xyz);
	PrimitiveData.ObjectWorldPosition					= DFFromTileOffset(PrimitiveData.ObjectWorldPositionTO);
	PrimitiveData.ActorWorldPosition					= DFFromTileOffset(PrimitiveData.ActorWorldPositionTO);
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w;
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) >> 24;
	PrimitiveData.WireframeColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).x);
	PrimitiveData.PrimitiveColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).y);
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z);
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).x;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).y);
	[unroll]
	for (int DataIndex = 0; DataIndex < 9u; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  33 + DataIndex);
	}
	return PrimitiveData;
}
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};
float4 ProcessMaterialColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
float4 ProcessMaterialLinearColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
struct FSubstrateData
{
	uint Dummy;
};
FSubstrateData GetInitialisedSubstrateData() { return (FSubstrateData)0; }
struct FMaterialParticleParameters
{
	float RelativeTime;
	float MotionBlurFade;
	float Random;
	float4 Velocity;
	float4 Color;
	float4 TranslatedWorldPositionAndSize;
	float4 PrevTranslatedWorldPositionAndSize;
	FLWCVector3 WorldPosition;
	FLWCVector3 PrevWorldPosition;
	float4 MacroUV;
	float4 DynamicParameter;
	FDFMatrix ParticleToWorld;
	FDFInverseMatrix WorldToParticle;
	float2 Size;
	float SpriteRotation;
};
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FSubstrateData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FSubstrateData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
};
struct FMaterialLWCData
{
	FLWCVector3 AbsoluteWorldPosition;
	FLWCVector3 WorldPosition_NoOffsets;
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	FLWCMatrix	InstanceToWorld;
	FLWCInverseMatrix WorldToInstance;
	FLWCMatrix	PreviousInstanceToWorld;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	FLWCMatrix ParticleToWorld;
	FLWCInverseMatrix WorldToParticle;
	FLWCVector3 ParticleWorldPosition;
	FLWCVector3 PrevParticleWorldPosition;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
};
struct FMaterialPixelParameters
{
	float4 VertexColor;
	float3 WorldNormal;
	float3 WorldTangent;
	float3 ReflectionVector;
	float3 CameraVector;
	float3 LightVector;
	float4 SvPosition;
	float4 ScreenPosition;
	float2 ViewBufferUV;
	float UnMirrored;
	float TwoSidedSign;
	float3x3 TangentToWorld;
	FDFVector3 AbsoluteWorldPosition;
	float3 WorldPosition_CamRelative;
	FDFVector3 WorldPosition_NoOffsets;
	float3 WorldPosition_NoOffsets_CamRelative;
	float3 LightingPositionOffset;
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	float AOMaterialMask;
	float PerInstanceRandom;
	uint PrimitiveId;
	FMaterialParticleParameters Particle;
	uint Dummy;
	float CloudSampleAltitude;
	float CloudSampleAltitudeInLayer;
	float CloudSampleNormAltitudeInLayer;
	float4 VolumeSampleConservativeDensity;
	float ShadowSampleDistance;
	float3 CloudEmptySpaceSkippingSphereCenterWorldPosition;
	float  CloudEmptySpaceSkippingSphereRadius;
	FMaterialAttributes MaterialAttributes;
	FMaterialLWCData LWCData;
};
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}
struct FMaterialVertexParameters
{
	float3 WorldPosition;
	float3x3 TangentToWorld;
	float PerInstanceRandom;
	FDFMatrix PrevFrameLocalToWorld;
	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;
	float4 VertexColor;
	FMaterialParticleParameters Particle;
	FMaterialAttributes MaterialAttributes;
	FSceneDataIntermediates SceneData;
	uint PrimitiveId;
	bool bEvaluateWorldPositionOffset;
	FMaterialLWCData LWCData;
};
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialVertexParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFMatrix GetInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFMatrix GetInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
FDFMatrix GetLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialVertexParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialPixelParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition_CamRelative, Result.PreViewTranslation);
	Result.WorldPosition_NoOffsets = LWCSubtract(Parameters.WorldPosition_NoOffsets_CamRelative, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
float MaterialExpressionCloudSampleNormAltitudeInLayer(FMaterialPixelParameters Parameters)
{
	return Parameters.CloudSampleNormAltitudeInLayer;
}
SamplerState GetMaterialSharedSampler(SamplerState TextureSampler, SamplerState SharedSampler)
{
	return SharedSampler;
}
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}
	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}
float LWCApplyAddressModeWrap(FLWCScalar V)
{
	const float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return FracTile + V.Offset;
}
float LWCApplyAddressModeMirror(FLWCScalar v)
{
	return LWCToFloat(v);
}
float LWCApplyAddressModeClamp(FLWCScalar v)
{
	return LWCToFloat(v);
}
float LWCApplyAddressMode(FLWCScalar v, uint AddressMode)
{
	if(AddressMode == 1u) return LWCApplyAddressModeWrap(v);
	else if(AddressMode == 2u) return LWCApplyAddressModeMirror(v);
	else return LWCApplyAddressModeClamp(v);
}
float2 LWCApplyAddressMode(FLWCVector2 UV, uint AddressX, uint AddressY)
{
	return float2(LWCApplyAddressMode( LWCGetComponent( UV , 0), AddressX), LWCApplyAddressMode( LWCGetComponent( UV , 1), AddressY));
}
float3 LWCApplyAddressMode(FLWCVector3 UV, uint AddressX, uint AddressY, uint AddressZ)
{
	return float3(LWCApplyAddressMode( LWCGetComponent( UV , 0), AddressX), LWCApplyAddressMode( LWCGetComponent( UV , 1), AddressY), LWCApplyAddressMode( LWCGetComponent( UV , 2), AddressZ));
}
float GetVolumetricAdvancedMaterialOutput0(inout FMaterialPixelParameters Parameters)
{
	float4 Local0 = MaterialCollection0.Vectors[0];
 return Local0.r;
}
float GetVolumetricAdvancedMaterialOutput1(inout FMaterialPixelParameters Parameters)
{
	float4 Local1 = MaterialCollection0.Vectors[0];
 return Local1.g;
}
float GetVolumetricAdvancedMaterialOutput2(inout FMaterialPixelParameters Parameters)
{
	float4 Local2 = MaterialCollection0.Vectors[0];
 return Local2.b;
}
float GetVolumetricAdvancedMaterialOutput3(inout FMaterialPixelParameters Parameters)
{
	float4 Local3 = MaterialCollection0.Vectors[0];
 return Local3.a;
}
float GetVolumetricAdvancedMaterialOutput4(inout FMaterialPixelParameters Parameters)
{
	float4 Local4 = MaterialCollection0.Vectors[1];
 return Local4.r;
}
float GetVolumetricAdvancedMaterialOutput5(inout FMaterialPixelParameters Parameters)
{
	float4 Local5 = MaterialCollection0.Vectors[1];
 return Local5.g;
}
float4 GetVolumetricAdvancedMaterialOutput6(inout FMaterialPixelParameters Parameters)
{
	float4 Local6 = MaterialCollection0.Vectors[4];
	float Local7 = floor(Local6.a);
	FLWCVector3 Local8 = GetWorldPosition(Parameters);
	FLWCVector3 Local9 = MakeLWCVector( LWCGetComponent(   Local8  , 0),  LWCGetComponent(   Local8  , 1),  LWCGetComponent(   Local8  , 2));
	FLWCVector2 Local10 = MakeLWCVector( LWCGetComponent(   Local9  , 0),  LWCGetComponent(   Local9  , 1));
	float4 Local11 = MaterialCollection0.Vectors[15];
	float4 Local12 = MaterialCollection0.Vectors[16];
	float2 Local13 = (Local11.rgba.rg + Local12.rgba.rg);
	FLWCVector2 Local14 = LWCAdd(  Local10 , Local13);
	float4 Local15 = MaterialCollection0.Vectors[3];
	FLWCVector2 Local16 = LWCDivide(  Local14 , ((float2)Local15.a));
	float2 Local17 = LWCApplyAddressMode(  Local16 , 1u, 1u);
	float Local18 =  1.0f;
	float4 Local19 = ProcessMaterialColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_0,GetMaterialSharedSampler(Material_Texture2D_0Sampler,Material_Wrap_WorldGroupSettings),Local17,Local7));
	float Local20 =  1.0f;
	float4 Local21 = MaterialCollection0.Vectors[5];
	float Local22 = (Local21.r * Local21.g);
	float Local23 = (Local22 * 0.01300000);
	FLWCVector2 Local24 = LWCAdd(float2(0.00000000,Local23),   Local16 );
	float2 Local25 = LWCApplyAddressMode(  Local24 , 1u, 1u);
	float Local26 =  1.0f;
	float4 Local27 = ProcessMaterialColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_0,GetMaterialSharedSampler(Material_Texture2D_0Sampler,Material_Wrap_WorldGroupSettings),Local25,Local7));
	float Local28 =  1.0f;
	float Local29 = (Local19.rgba.r * Local27.rgb.g);
	float4 Local30 = MaterialCollection0.Vectors[6];
	FLWCVector2 Local31 = LWCDivide(  Local24 , ((float2)Local30.r));
	float2 Local32 = LWCFrac(  Local31 );
	float2 Local33 = (  Local32  * ((float2)6.28318548));
	float2 Local34 = sin(  Local33 );
	float Local35 =   Local34 .r;
	float Local36 =   Local34 .g;
	float Local37 = (  Local35  *   Local36 );
	float4 Local38 = MaterialCollection0.Vectors[7];
	float Local39 = (1.00000000 - Local38.r);
	float Local40 = (Local30.b * Local39);
	float Local41 = (  Local37  * Local40);
	float Local42 = (  Local41  + Local21.b);
	float4 Local43 = MaterialCollection0.Vectors[17];
	FLWCVector2 Local44 = LWCSubtract(  Local10 , Local43.rgba.rg);
	FLWCVector2 Local45 = LWCDivide(  Local44 , ((float2)Local43.rgba.b));
	float2 Local46 = LWCApplyAddressMode(  Local45 , 0u, 0u);
	float Local47 =  1.0f;
	float4 Local48 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_1,GetMaterialSharedSampler(Material_Texture2D_1Sampler,Material_Clamp_WorldGroupSettings),Local46));
	float Local49 =  1.0f;
	float3 Local50 = saturate(Local48.rgb);
	float3 Local51 = (Local50 * ((float3)Local30.a));
	float Local52 = lerp(  Local42 ,0.00000000,Local51.r);
	float Local53 = lerp(Local52,1.39999998,Local51.g);
	float Local54 = lerp(Local53,3.00000000,Local51.b);
	float Local55 = (Local54 / 6.50000000);
	float Local56 = (1.00000000 - Local55);
	float Local57 = PositiveClampedPow(Local56,3.00000000);
	float Local58 = (Local57 - 0.25000000);
	float Local59 = (Local29 - Local58);
	float Local60 = saturate(Local59);
	float Local61 = (1.00000000 - Local58);
	float Local62 = (Local60 / Local61);
	float Local63 = (Local54 / 3.00000000);
	float Local64 = MaterialExpressionCloudSampleNormAltitudeInLayer(Parameters);
	float Local65 = saturate(Local64);
	float Local66 = lerp(Local27.rgb.r,Local19.rgba.a,0.60000002);
	float Local67 = PositiveClampedPow(Local66,2.00000000);
	float Local68 = (Local54 - 1.50000000);
	float Local69 = saturate(Local68);
	float Local70 = lerp(Local38.g,Local38.b,Local69);
	float Local71 = (Local67 * Local70);
	float Local72 = (Local71 * -1.00000000);
	float Local73 = lerp(Local65,1.00000000,Local72);
	float Local74 = saturate(Local73);
	float Local75 = (1.00000000 - Local74);
	float Local76 =  1.0f;
	float4 Local77 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_2,GetMaterialSharedSampler(Material_Texture2D_2Sampler,Material_Clamp_WorldGroupSettings),float2(Local63,Local75)));
	float Local78 =  1.0f;
	float Local79 = (1.00000000 - Local77.r);
	float Local80 = (Local62 - Local79);
	float Local81 = saturate(Local80);
	float4 Local82 = MaterialCollection0.Vectors[1];
	float3 Local83 = (float3(float2(Local81,Local74),Local54) * ((float3)Local82.b));
	float3 Local84 = (GetReflectionCapturePassSwitchState() ? (Local83) : (float3(float2(Local81,Local74),Local54)));
 return float4(Local84,0.0f);
}
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;
	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
	{
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	return RetNormal;
}
float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}
float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}
float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}
float4 GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	PixelMaterialInputs.Normal = float3(0.00000000,0.00000000,1.00000000);
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
	MaterialNormal = normalize(MaterialNormal);
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
	Parameters.WorldNormal *= Parameters.TwoSidedSign;
	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);
	Parameters.Particle.MotionBlurFade = 1.0f;
	PixelMaterialInputs.EmissiveColor = float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = float3(0.00000000,0.00000000,1.00000000);
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = float4(float3(1.00000000,1.00000000,1.00000000),Material.PreshaderBuffer[0].x);
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = float3(float3(1.00000000,0.00000000,0.00000000).xy,Material.PreshaderBuffer[0].y);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 1;
	PixelMaterialInputs.FrontMaterial = GetInitialisedSubstrateData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.50000000;
	Parameters.WorldTangent = 0;
}
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition;
	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.LWCData = MakeMaterialLWCData(Parameters);
	Parameters.AbsoluteWorldPosition = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.AbsoluteWorldPosition.Tile, 2097152.00f, Parameters.LWCData.AbsoluteWorldPosition.Offset);
	Parameters.WorldPosition_NoOffsets = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.WorldPosition_NoOffsets.Tile, 2097152.00f, Parameters.LWCData.WorldPosition_NoOffsets.Offset);
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);
		Parameters.CameraVector =  select_internal( IsOrthoProjection(ResolvedView) , -ResolvedView.ViewForward , normalize(-Parameters.WorldPosition_CamRelative.xyz) );
	Parameters.LightVector = 0;
	Parameters.TwoSidedSign = 1.0f;
	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}
void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}
struct FCloudLayerParameters
{
	float3 CloudLayerCenter;
	float PlanetRadius;
	float BottomRadius;
	float TopRadius;
	float ToNormAltitude;
};
FCloudLayerParameters GetCloudLayerParams(
	in float3 CloudLayerCenterKm,
	in float PlanetRadiusKm,
	in float BottomRadiusKm,
	in float TopRadiusKm)
{
	FCloudLayerParameters CloudLayerParams;
	CloudLayerParams.CloudLayerCenter = CloudLayerCenterKm * (1000.0f * 100.0f);
	CloudLayerParams.PlanetRadius = PlanetRadiusKm * (1000.0f * 100.0f);
	CloudLayerParams.BottomRadius = BottomRadiusKm * (1000.0f * 100.0f);
	CloudLayerParams.TopRadius = TopRadiusKm * (1000.0f * 100.0f);
	CloudLayerParams.ToNormAltitude = 1.0 / (CloudLayerParams.TopRadius - CloudLayerParams.BottomRadius);
	return CloudLayerParams;
}
void UpdateMaterialCloudParam(inout FMaterialPixelParameters MaterialParameters,
                              float3 TranslatedWorldPosition, in ViewState InputView, in FCloudLayerParameters CloudLayerParams,
                              in float ShadowSampleDistance, in float EmptySpaceSkippingSliceDepth)
{
	MaterialParameters.AbsoluteWorldPosition = DFFastSubtract(TranslatedWorldPosition, InputView.PreViewTranslation);
	MaterialParameters.LWCData.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition, MaterialParameters.LWCData.PreViewTranslation);
	MaterialParameters.WorldPosition_CamRelative = TranslatedWorldPosition;
	MaterialParameters.CameraVector = normalize(InputView.TranslatedWorldCameraOrigin - TranslatedWorldPosition);
	float3 AbsoluteWorldPositionTruncated = TranslatedWorldPosition - DFDemote(InputView.PreViewTranslation);
	float CloudSampleAltitude = length(AbsoluteWorldPositionTruncated - CloudLayerParams.CloudLayerCenter);
	MaterialParameters.CloudSampleAltitude = CloudSampleAltitude - CloudLayerParams.PlanetRadius;
	MaterialParameters.CloudSampleAltitudeInLayer = CloudSampleAltitude - CloudLayerParams.BottomRadius;
	MaterialParameters.CloudSampleNormAltitudeInLayer = saturate(MaterialParameters.CloudSampleAltitudeInLayer * CloudLayerParams.ToNormAltitude);
	const float DefaultConservativeDensity = 1.0f;
	MaterialParameters.VolumeSampleConservativeDensity = DefaultConservativeDensity;								
	MaterialParameters.VolumeSampleConservativeDensity = GetVolumetricAdvancedMaterialOutput6(MaterialParameters);	
	MaterialParameters.CloudEmptySpaceSkippingSphereCenterWorldPosition = AbsoluteWorldPositionTruncated; 
	MaterialParameters.CloudEmptySpaceSkippingSphereRadius = 0.5f * EmptySpaceSkippingSliceDepth * 1.73f;			
	MaterialParameters.ShadowSampleDistance = ShadowSampleDistance;
}
float3 GetSkySHDiffuseSimple(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1);
	float3 Intermediate0;
	Intermediate0.x = dot(View_SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_SkyIrradianceEnvironmentMap[2], NormalVector);		
	return max(0, Intermediate0);
}
float IsotropicPhase()
{
	return 1.0f / (4.0f * PI);
}
float HenyeyGreensteinPhase(float G, float CosTheta)
{
	float Numer = 1.0f - G * G;
	float Denom = 1.0f + G * G + 2.0f * G * CosTheta;
	return Numer / (4.0f * PI * Denom * sqrt(Denom));
}
struct FLocalFogVolumeGPUInstanceData
{
	float4x3 InvTransform;
	float RadialFogExtinction;
	float HeightFogExtinction;
	float HeightFogFalloff;
	float HeightFogOffset;
	float3 Emissive;
	float  UniformScale;
	float  UniformScaleInv;		
	float3 Albedo;
	float  PhaseG;
};
FLocalFogVolumeGPUInstanceData GetLocalFogVolumeGPUInstanceData(uint Index)
{
	FLocalFogVolumeGPUInstanceData Data;
	uint Offset = Index * 3;
	float4 Data0 = RenderVolumetricCloudParameters_LFV_LocalFogVolumeInstances[Offset + 0];
	float4 Data1 = RenderVolumetricCloudParameters_LFV_LocalFogVolumeInstances[Offset + 1];
	float4 Data2 = RenderVolumetricCloudParameters_LFV_LocalFogVolumeInstances[Offset + 2];
	float3 Trans		= Data0.xyz;
	Data.UniformScale	= Data0.w;
	Data.UniformScaleInv= 1.0f / Data.UniformScale;
	float3 XVec;
	float3 YVec;
	XVec.xy		= UnpackFloat2FromUInt(asuint(Data1.x));
	float2 Temp	= UnpackFloat2FromUInt(asuint(Data1.y));
	XVec.z		= Temp.x;
	YVec.x		= Temp.y;
	YVec.yz		= UnpackFloat2FromUInt(asuint(Data1.z));
	float3 ZVec = cross(XVec, YVec);
	Data.InvTransform = float4x3(float3(XVec * Data.UniformScaleInv), float3(YVec * Data.UniformScaleInv), float3(ZVec * Data.UniformScaleInv), Trans);
	float3 Data2X			= UnpackR11G11B10F(asuint(Data2.x));
	Data.RadialFogExtinction= Data2X.x;
	Data.HeightFogExtinction= Data2X.y;
	Data.HeightFogFalloff	= Data2X.z;
	uint PackEmissiveData   = asuint(Data2.y);
	if (PackEmissiveData > 0)
	{
		Data.Emissive = UnpackR11G11B10F(PackEmissiveData);
	}
	else
	{
		Data.Emissive = 0.0f.xxx;
	}
	float4 Data2Z			= UnpackRGBA8(asuint(Data2.z));
	Data.Albedo				= Data2Z.rgb;
	Data.PhaseG				= Data2Z.a;
	Data.HeightFogOffset	= Data2.w;
	return Data;
}
struct FFogData
{
	float IntegratedLuminanceFactor;
	float Coverage;
};
FFogData LocalFogVolumeEvaluateAnalyticalIntegral(FLocalFogVolumeGPUInstanceData FogInstance, float3 RayStartU, float3 RayDirU, float RayLengthU)
{
	FFogData FogData;
	float RadialOpticalDepth = 0.0f;
	float HeightOpticalDepth = 0.0f;
	if (FogInstance.RadialFogExtinction > 0.0f)
	{
		float3 SphereCenter = 0.0f;
		float3 VolumeCenterToRayO = (RayStartU - SphereCenter);
		float b = dot(RayDirU, VolumeCenterToRayO);
		float c = dot(VolumeCenterToRayO, VolumeCenterToRayO) - 1.0f;
		float h = b * b - c;
		if (h >= 0.0)
		{
			h = sqrt(h);
			float Length0 = -b - h;
			float Length1 = -b + h;
			Length0 = max(Length0, 0.0);
			Length1 = max(Length1, 0.0);
			Length1 = min(Length1, RayLengthU);
			const float Length0Sqr = Length0 * Length0;
			const float Length1Sqr = Length1 * Length1;
			float Integral0 = -(c * Length0 + b * Length0Sqr + Length0Sqr * Length0 / 3.0f);
			float Integral1 = -(c * Length1 + b * Length1Sqr + Length1Sqr * Length1 / 3.0f);
			RadialOpticalDepth = max(0.0, FogInstance.RadialFogExtinction * (Integral1 - Integral0) * (3.0f / 4.0f));
		}
	}
	if (FogInstance.HeightFogExtinction > 0.0f)
	{
		float StartHeight = RayStartU.z - FogInstance.HeightFogOffset; 
		float Factor0 = StartHeight * FogInstance.HeightFogFalloff;
		float Factor1 = RayDirU.z * RayLengthU * FogInstance.HeightFogFalloff;
		Factor0 = max(-80.0f, Factor0); 
		HeightOpticalDepth += (FogInstance.HeightFogExtinction / (FogInstance.HeightFogFalloff * RayDirU.z)) * (exp(-Factor0) - exp(-(Factor0 + Factor1)));
	}
	float TR = exp(-RadialOpticalDepth);
	float TH = exp(-HeightOpticalDepth);
	float T = 1 - (1 - TR) * (1 - TH);
	float OpticalDepth = -log(T);
	float Transmittance = exp(-OpticalDepth * FogInstance.UniformScale * (1.0f / 100.0f));
	FogData.Coverage = (1.0 - Transmittance);
	FogData.IntegratedLuminanceFactor = FogData.Coverage;
	return FogData;
}
float3 LocalFogVolumeEvaluateInScattering(in FLocalFogVolumeGPUInstanceData FogInstance, in FFogData FogData, in float3 RayDirWorld)
{
	float3 InScattering = 0.0f;
	InScattering += RenderVolumetricCloudParameters.LFV_DirectionalLightColor * HenyeyGreensteinPhase(-FogInstance.PhaseG, dot(RayDirWorld, RenderVolumetricCloudParameters.LFV_DirectionalLightDirection));
	if (View.SkyLightVolumetricScatteringIntensity > 0)
	{
		float3 SkyLighting = View.SkyLightColor.rgb * GetSkySHDiffuseSimple(RayDirWorld * -FogInstance.PhaseG);
		const float SkyVisibility = 1.0f; 
		InScattering += (SkyVisibility * View.SkyLightVolumetricScatteringIntensity) * SkyLighting;
	}
	InScattering *= FogInstance.Albedo;
	InScattering += FogInstance.Emissive;
	return InScattering * FogData.IntegratedLuminanceFactor;
}
float4 GetLFVInstanceContribution(
	in uint InstanceIndex,
	in float3 CamRayWorldOrigin,
	in float3 CamRayWorldDir,
	in float3 DepthBufferWorldPos,
	in bool bPlatformSupportsVolumetricFogOntranslucent)
{
	FLocalFogVolumeGPUInstanceData FogInstance = GetLocalFogVolumeGPUInstanceData(InstanceIndex);
	float3 LuminanceColor = float3(0.0f, 0.0f, 0.0f);
	float Transmittance = 1.0f;
	float3 DepthBufferPosU	= mul(float4(DepthBufferWorldPos, 1.0f),	FogInstance.InvTransform).xyz;
	float3 RayPosU			= mul(float4(CamRayWorldOrigin,   1.0f),	FogInstance.InvTransform).xyz;
	float3 RayDirU			= mul(float4(CamRayWorldDir,      0.0f),	FogInstance.InvTransform).xyz;
	RayDirU.xyz = normalize(RayDirU);
	float2 TsU = RayIntersectSphere(RayPosU, RayDirU, float4(0.0, 0.0, 0.0, 1.0));
	TsU = max(RenderVolumetricCloudParameters.LFV_GlobalStartDistance.xx * FogInstance.UniformScaleInv, TsU);
	float3 ViewToDepthVector = DepthBufferPosU - RayPosU;
	float ViewToDepthVectorSqrLength = dot(ViewToDepthVector, ViewToDepthVector);
	float LengthDepthBufferU = sqrt(ViewToDepthVectorSqrLength);
	TsU = min(TsU, LengthDepthBufferU);
	if (any(TsU > 0.0))
	{
		if (RenderVolumetricCloudParameters.LFV_ShouldRenderLocalFogVolumeInVolumetricFog && bPlatformSupportsVolumetricFogOntranslucent)
		{
			float CosAngle = dot(CamRayWorldDir, View.ViewForward);
			float InvCosAngle = (CosAngle > 0.0001) ? rcp(CosAngle) : 0;
			float ExcludeDistance = View.VolumetricFogMaxDistance * InvCosAngle * FogInstance.UniformScaleInv;
			TsU = max(TsU, ExcludeDistance);
		}
		float RayTracedLengthU = max(0.0, abs(TsU.y - TsU.x));
		if (RayTracedLengthU > 0.0)
		{
			FFogData FogData = LocalFogVolumeEvaluateAnalyticalIntegral(FogInstance, RayPosU + RayDirU * TsU.x, RayDirU, RayTracedLengthU);
			LuminanceColor = LocalFogVolumeEvaluateInScattering(FogInstance, FogData, CamRayWorldDir);
			Transmittance = 1.0 - FogData.Coverage;
		}
	}
	return float4(LuminanceColor, Transmittance);
}
float4 GetLFVContribution(
	in ViewState ResolvedView,
	in uint2 TilePos,
	in float3 DepthBufferTranslatedWorldPos,
	in bool bPlatformSupportsVolumetricFogOntranslucent,
	inout uint OutLFVCount)
{
	const float3 PreViewTranslation			= DFDemote(ResolvedView.PreViewTranslation);
	const float3 CamRayTranslatedWorldOrigin= ResolvedView.TranslatedWorldCameraOrigin;
	const float3 CamRayWorldOrigin			= CamRayTranslatedWorldOrigin - PreViewTranslation;
	const float3 CamRayWorldDir				= normalize(DepthBufferTranslatedWorldPos - CamRayTranslatedWorldOrigin);
	const float3 DepthBufferWorldPos		= DepthBufferTranslatedWorldPos - PreViewTranslation;
	OutLFVCount = RenderVolumetricCloudParameters_LFV_LocalFogVolumeTileDataTexture[uint3(TilePos, 0)];
	const float4 DefaultColorTransmittance = float4(0.0, 0.0, 0.0, 1.0);
	float4 LFVContribution = DefaultColorTransmittance;
	for (int LFVIndex = 0; LFVIndex < OutLFVCount; ++LFVIndex)
	{
		uint InstanceIndex = RenderVolumetricCloudParameters_LFV_LocalFogVolumeTileDataTexture[uint3(TilePos, 1 + LFVIndex)];
		float4 LFVLuminanceColorTransmittance = GetLFVInstanceContribution(
			InstanceIndex,
			CamRayWorldOrigin,
			CamRayWorldDir,
			DepthBufferWorldPos,
			bPlatformSupportsVolumetricFogOntranslucent);
		LFVContribution = float4(LFVContribution.rgb * LFVLuminanceColorTransmittance.a + LFVLuminanceColorTransmittance.rgb, LFVContribution.a * LFVLuminanceColorTransmittance.a);
	}
	return LFVContribution;
}
float4 GetLFVContribution(
	in ViewState ResolvedView,
	in uint2 TilePos,
	in float3 TranslatedWorldPosition,
	in bool bPlatformSupportsVolumetricFogOntranslucent = true)
{
	uint OutLFVCount = 0;
	return GetLFVContribution(ResolvedView, TilePos, TranslatedWorldPosition, bPlatformSupportsVolumetricFogOntranslucent, OutLFVCount);
}
float3 SampleExtinctionCoefficients(in FPixelMaterialInputs PixelMaterialInputs)
{
	float3 Extinction = 0.0f;
	Extinction = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs).rgb;
	return clamp(Extinction, 0.0f, 65000.0f);
}
float3 SampleEmissive(in FPixelMaterialInputs PixelMaterialInputs)
{
	float3 EmissiveColor = 0.0f;
	EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs).rgb;
	return clamp(EmissiveColor, 0.0f, 65000.0f);
}
float3 SampleAlbedo(in FPixelMaterialInputs PixelMaterialInputs)
{
	float3 Albedo = 0.0f;
	Albedo = GetMaterialBaseColor(PixelMaterialInputs).rgb * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
	return saturate(Albedo);
}
void ConvertCloudPixelMaterialInputsToWorkingColorSpace(inout FPixelMaterialInputs PixelMaterialInputs)
{
}
bool RayIntersectSphereSolution(float3 RayOrigin, float3 RayDirection, float4 Sphere, inout float2 Solutions)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);
	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;
	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;
	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Solutions = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
		return true;
	}
	return false;
}
float2 FromUnitToSubUvs(float2 uv, float4 SizeAndInvSize) { return (uv + 0.5f * SizeAndInvSize.zw) * (SizeAndInvSize.xy / (SizeAndInvSize.xy + 1.0f)); }
float4 GetAerialPerspectiveLuminanceTransmittance(
	bool ViewIsRealTimeReflectionCapture, float4 CameraAerialPerspectiveVolumeSizeAndInvSize,
	float4 NDC, float3 WorldPositionRelativeToCamera,
	Texture3D<float4> AerialPerspectiveVolumeTexture, SamplerState AerialPerspectiveVolumeTextureSampler,
	float AerialPerspectiveVolumeDepthResolutionInv,
	float AerialPerspectiveVolumeDepthResolution,
	float AerialPerspectiveVolumeStartDepth,
	float AerialPerspectiveVolumeDepthSliceLengthKm,
	float AerialPerspectiveVolumeDepthSliceLengthKmInv,
	float OneOverExposure,
	float NearFadeOutRangeInvDepthKm)
{
	if (View.RenderingReflectionCaptureMask == 0.0f && ! (( View.EnvironmentComponentsFlags [0] & 0x08)   > 0))
	{
		return float4(0.0f, 0.0f, 0.0f, 1.0f);
	}
	float2 ScreenUv = (NDC.xy / NDC.ww) * float2(0.5f, -0.5f) + 0.5f;
	float tDepth = max(0.0f, length(WorldPositionRelativeToCamera) - AerialPerspectiveVolumeStartDepth);
	float LinearSlice = tDepth * AerialPerspectiveVolumeDepthSliceLengthKmInv;
	float LinearW = LinearSlice * AerialPerspectiveVolumeDepthResolutionInv; 
	float NonLinW = sqrt(LinearW); 
	float NonLinSlice = NonLinW * AerialPerspectiveVolumeDepthResolution;
	const float HalfSliceDepth = 0.70710678118654752440084436210485f; 
	float Weight = 1.0f;
	if (NonLinSlice < HalfSliceDepth)
	{
		Weight = saturate(NonLinSlice*NonLinSlice * 2.0f); 
	}
	Weight *= saturate(tDepth * NearFadeOutRangeInvDepthKm);
	if (ViewIsRealTimeReflectionCapture)
	{
		float3 WorldDir = normalize(WorldPositionRelativeToCamera);
		float SinPhi = WorldDir.z;
		float CosPhi = sqrt(1.0f - SinPhi * SinPhi);
		ScreenUv.y = WorldDir.z * 0.5f + 0.5f;
		float CosTheta = WorldDir.x / CosPhi;
		float SinTheta = WorldDir.y / CosPhi;
		float Theta = acos(CosTheta);
		Theta = SinTheta < 0.0f ? (PI-Theta) + PI : Theta;
		ScreenUv.x = Theta / (2.0 * PI);
		ScreenUv = FromUnitToSubUvs(ScreenUv, CameraAerialPerspectiveVolumeSizeAndInvSize);
	}
	float4 AP = Texture3DSampleLevel(AerialPerspectiveVolumeTexture, AerialPerspectiveVolumeTextureSampler, float3(ScreenUv, NonLinW), 0.0f);
	AP.rgb *= Weight;
	AP.a = 1.0 - (Weight * (1.0f - AP.a));
	AP.rgb *= OneOverExposure;
	return AP;
}
void getTransmittanceLutUvs(
	in float viewHeight, in float viewZenithCosAngle, in float BottomRadius, in float TopRadius,
	out float2 UV)
{
	float H = sqrt(max(0.0f, TopRadius * TopRadius - BottomRadius * BottomRadius));
	float Rho = sqrt(max(0.0f, viewHeight * viewHeight - BottomRadius * BottomRadius));
	float Discriminant = viewHeight * viewHeight * (viewZenithCosAngle * viewZenithCosAngle - 1.0f) + TopRadius * TopRadius;
	float D = max(0.0f, (-viewHeight * viewZenithCosAngle + sqrt(Discriminant))); 
	float Dmin = TopRadius - viewHeight;
	float Dmax = Rho + H;
	float Xmu = (D - Dmin) / (Dmax - Dmin);
	float Xr = Rho / H;
	UV = float2(Xmu, Xr);
}
float3 GetAtmosphereTransmittance(
	float3 PlanetCenterToWorldPos, float3 WorldDir, float BottomRadius, float TopRadius,
	Texture2D<float4> TransmittanceLutTexture, SamplerState TransmittanceLutTextureSampler)
{
	const float2 Sol = RayIntersectSphere(PlanetCenterToWorldPos, WorldDir, float4(float3(0.0f, 0.0f, 0.0f), BottomRadius));
	if (Sol.x > 0.0f || Sol.y > 0.0f)
	{
		return 0.0f;
	}
	const float PHeight = length(PlanetCenterToWorldPos);
	const float3 UpVector = PlanetCenterToWorldPos / PHeight;
	const float LightZenithCosAngle = dot(WorldDir, UpVector);
	float2 TransmittanceLutUv;
	getTransmittanceLutUvs(PHeight, LightZenithCosAngle, BottomRadius, TopRadius, TransmittanceLutUv);
	const float3 TransmittanceToLight = Texture2DSampleLevel(TransmittanceLutTexture, TransmittanceLutTextureSampler, TransmittanceLutUv, 0.0f).rgb;
	return TransmittanceToLight;
}
float BlueNoiseScalar(uint2 ScreenCoord, uint FrameIndex)
{
	uint3 WrappedCoordinate = uint3(ScreenCoord, FrameIndex) & RenderVolumetricCloudParameters.BlueNoise_ModuloMasks;
	uint3 TextureCoordinate = uint3(WrappedCoordinate.x, WrappedCoordinate.z * RenderVolumetricCloudParameters.BlueNoise_Dimensions.y + WrappedCoordinate.y, 0);
	return RenderVolumetricCloudParameters_BlueNoise_ScalarTexture.Load(TextureCoordinate, 0).x;
}
static const float FLT_EPSILON = 0.001f;
static const float FLT_EPSILON2 = 0.01f;
float3 ComputeInscatteringColor(float3 CameraToReceiver, float CameraToReceiverLength)
{
	float3 Inscattering = RenderVolumetricCloudParameters.ExponentialFogColorParameter.xyz;
	[branch]
	if (RenderVolumetricCloudParameters.ExponentialFogParameters3.z > 0)
	{
		float FadeAlpha = saturate(CameraToReceiverLength * RenderVolumetricCloudParameters.FogInscatteringTextureParameters.x + RenderVolumetricCloudParameters.FogInscatteringTextureParameters.y);
		float3 CubemapLookupVector = CameraToReceiver;
		CubemapLookupVector.xy = float2(dot(CubemapLookupVector.xy, float2(RenderVolumetricCloudParameters.SinCosInscatteringColorCubemapRotation.y, -RenderVolumetricCloudParameters.SinCosInscatteringColorCubemapRotation.x)), dot(CubemapLookupVector.xy, RenderVolumetricCloudParameters.SinCosInscatteringColorCubemapRotation.xy));
		float3 DirectionalColor = TextureCubeSampleLevel(RenderVolumetricCloudParameters_FogInscatteringColorCubemap, RenderVolumetricCloudParameters_FogInscatteringColorSampler, CubemapLookupVector, 0).xyz;
		float3 NonDirectionalColor = TextureCubeSampleLevel(RenderVolumetricCloudParameters_FogInscatteringColorCubemap, RenderVolumetricCloudParameters_FogInscatteringColorSampler, CubemapLookupVector, RenderVolumetricCloudParameters.FogInscatteringTextureParameters.z).xyz;
		Inscattering *= lerp(NonDirectionalColor, DirectionalColor, FadeAlpha);
	}
	Inscattering += RenderVolumetricCloudParameters.SkyAtmosphereAmbientContributionColorScale.rgb * View.SkyAtmosphereHeightFogContribution.xxx * Texture2DSampleLevel(View_DistantSkyLightLutTexture, View_DistantSkyLightLutTextureSampler, float2(0.5f, 0.5f), 0.0f).rgb;
	return Inscattering;
}
float CalculateLineIntegralShared(float FogHeightFalloff, float RayDirectionZ, float RayOriginTerms)
{
	float Falloff = max(-127.0f, FogHeightFalloff * RayDirectionZ);    
	float LineIntegral = ( 1.0f - exp2(-Falloff) ) / Falloff;
	float LineIntegralTaylor = log(2.0) - ( 0.5 * Pow2( log(2.0) ) ) * Falloff;		
	return RayOriginTerms * ( abs(Falloff) > FLT_EPSILON2 ? LineIntegral : LineIntegralTaylor );
}
float4 GetExponentialHeightFog(float3 WorldPositionRelativeToCamera, float ExcludeDistance)
{
	const float MinFogOpacity = RenderVolumetricCloudParameters.ExponentialFogColorParameter.w;
	const float MaxWorldObserverHeight = RenderVolumetricCloudParameters.ExponentialFogParameters.z;
	const float3 WorldObserverOrigin = float3(DFDemote(GetPrimaryView().WorldCameraOrigin).xy, min(DFDemote(GetPrimaryView().WorldCameraOrigin).z, MaxWorldObserverHeight)); 
	float3 CameraToReceiver = WorldPositionRelativeToCamera;
	CameraToReceiver.z += DFDemote(GetPrimaryView().WorldCameraOrigin).z - WorldObserverOrigin.z; 
	float CameraToReceiverLengthSqr = dot(CameraToReceiver, CameraToReceiver);
	float CameraToReceiverLengthInv = rsqrt(max(CameraToReceiverLengthSqr, 0.00000001f));
	float CameraToReceiverLength = CameraToReceiverLengthSqr * CameraToReceiverLengthInv;
	float3 CameraToReceiverNormalized = CameraToReceiver * CameraToReceiverLengthInv;
	float RayOriginTerms = RenderVolumetricCloudParameters.ExponentialFogParameters.x;
	float RayOriginTermsSecond = RenderVolumetricCloudParameters.ExponentialFogParameters2.x;
	float RayLength = CameraToReceiverLength;
	float RayDirectionZ = CameraToReceiver.z;
	ExcludeDistance = max(ExcludeDistance, RenderVolumetricCloudParameters.ExponentialFogParameters.w);
	if (ExcludeDistance > 0)
	{
		float ExcludeIntersectionTime = ExcludeDistance * CameraToReceiverLengthInv;
		float CameraToExclusionIntersectionZ = ExcludeIntersectionTime * CameraToReceiver.z;
		float ExclusionIntersectionZ = WorldObserverOrigin.z + CameraToExclusionIntersectionZ;
		float ExclusionIntersectionToReceiverZ = CameraToReceiver.z - CameraToExclusionIntersectionZ;
		RayLength = (1.0f - ExcludeIntersectionTime) * CameraToReceiverLength;
		RayDirectionZ = ExclusionIntersectionToReceiverZ;
		float Exponent = max(-127.0f, RenderVolumetricCloudParameters.ExponentialFogParameters.y * (ExclusionIntersectionZ - RenderVolumetricCloudParameters.ExponentialFogParameters3.y));
		RayOriginTerms = RenderVolumetricCloudParameters.ExponentialFogParameters3.x * exp2(-Exponent);
		float ExponentSecond = max(-127.0f, RenderVolumetricCloudParameters.ExponentialFogParameters2.y * (ExclusionIntersectionZ - RenderVolumetricCloudParameters.ExponentialFogParameters2.w)); 	 
		RayOriginTermsSecond = RenderVolumetricCloudParameters.ExponentialFogParameters2.z * exp2(-ExponentSecond);
	}
	float ExponentialHeightLineIntegralShared = CalculateLineIntegralShared(RenderVolumetricCloudParameters.ExponentialFogParameters.y, RayDirectionZ, RayOriginTerms);
	ExponentialHeightLineIntegralShared+= CalculateLineIntegralShared(RenderVolumetricCloudParameters.ExponentialFogParameters2.y, RayDirectionZ, RayOriginTermsSecond);
	float ExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * RayLength;
	float3 InscatteringColor = ComputeInscatteringColor(CameraToReceiver, CameraToReceiverLength);
	float3 DirectionalInscattering = 0;
	[branch]
	if (RenderVolumetricCloudParameters.InscatteringLightDirection.w >= 0
		&& RenderVolumetricCloudParameters.ExponentialFogParameters3.z == 0
	)
	{
		const float UniformPhaseFunction = 1.0f / (4.0f*PI);
		float3 DirectionalInscatteringColor;
		float3 DirectionalLightInscattering;
		DirectionalInscatteringColor = RenderVolumetricCloudParameters.DirectionalInscatteringColor.xyz + View.SkyAtmosphereHeightFogContribution * View.AtmosphereLightIlluminanceOnGroundPostTransmittance[0].rgb * UniformPhaseFunction;
		DirectionalLightInscattering = DirectionalInscatteringColor * pow(saturate(dot(CameraToReceiverNormalized, View.AtmosphereLightDirection[0].xyz)), RenderVolumetricCloudParameters.DirectionalInscatteringColor.w);
		if (View.AtmosphereLightIlluminanceOnGroundPostTransmittance[1].a > 0.0f) 
		{
			DirectionalInscatteringColor = RenderVolumetricCloudParameters.DirectionalInscatteringColor.xyz + View.SkyAtmosphereHeightFogContribution * View.AtmosphereLightIlluminanceOnGroundPostTransmittance[1].rgb * UniformPhaseFunction;
			DirectionalLightInscattering += DirectionalInscatteringColor * pow(saturate(dot(CameraToReceiverNormalized, View.AtmosphereLightDirection[1].xyz)), RenderVolumetricCloudParameters.DirectionalInscatteringColor.w);
		}
		float DirectionalInscatteringStartDistance = RenderVolumetricCloudParameters.InscatteringLightDirection.w;
		float DirExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * max(RayLength - DirectionalInscatteringStartDistance, 0.0f);
		float DirectionalInscatteringFogFactor = saturate(exp2(-DirExponentialHeightLineIntegral));
		DirectionalInscattering = DirectionalLightInscattering * (1 - DirectionalInscatteringFogFactor);
	}
	float ExpFogFactor = max(saturate(exp2(-ExponentialHeightLineIntegral)), MinFogOpacity);
	[flatten]
	if (RenderVolumetricCloudParameters.ExponentialFogParameters3.w > 0 && CameraToReceiverLength > RenderVolumetricCloudParameters.ExponentialFogParameters3.w)
	{
		ExpFogFactor = 1;
		DirectionalInscattering = 0;
	}
		float3 FogColor = (InscatteringColor) * (1 - ExpFogFactor) + DirectionalInscattering;
	return float4(FogColor, ExpFogFactor);
}
float4 CalculateHeightFog(float3 WorldPositionRelativeToCamera)
{
	if (View.RenderingReflectionCaptureMask == 0.0f && ! (( View.EnvironmentComponentsFlags [0] & 0x20)  > 0))
	{
		return float4(0.0f, 0.0f, 0.0f, 1.0f);
	}
	float ExcludeDistance = 0;
	float CosAngle = dot(normalize(WorldPositionRelativeToCamera), View.ViewForward);
	float InvCosAngle = (CosAngle > FLT_EPSILON) ? rcp(CosAngle) : 0;
	ExcludeDistance = View.VolumetricFogMaxDistance * InvCosAngle;
	float4 FogInscatteringAndOpacity = GetExponentialHeightFog(WorldPositionRelativeToCamera, ExcludeDistance);
	return FogInscatteringAndOpacity;
}
float4 CombineVolumetricFog(float4 GlobalFog, float3 VolumeUV, uint EyeIndex, float SceneDepth)
{
	float4 VolumetricFogLookup = float4(0, 0, 0, 1);
	if (View.RenderingReflectionCaptureMask == 0.0f && ! (( View.EnvironmentComponentsFlags [0] & 0x20)  > 0))
	{
		return VolumetricFogLookup;
	}
	float VolFogStartDistance = 0.0f;
	if (RenderVolumetricCloudParameters.ApplyVolumetricFog > 0)
	{
		VolFogStartDistance = RenderVolumetricCloudParameters.VolumetricFogStartDistance;
		VolumetricFogLookup = Texture3DSampleLevel(RenderVolumetricCloudParameters_IntegratedLightScattering, View_SharedBilinearClampedSampler, VolumeUV, 0);
		VolumetricFogLookup.rgb *= View.OneOverPreExposure;
	}
	VolumetricFogLookup = lerp(float4(0, 0, 0, 1), VolumetricFogLookup, saturate((SceneDepth - VolFogStartDistance) * 100000000.0f));
	return float4(VolumetricFogLookup.rgb + GlobalFog.rgb * VolumetricFogLookup.a, VolumetricFogLookup.a * GlobalFog.a);
}
float ComputeNormalizedZSliceFromDepth(float SceneDepth)
{
	return log2(SceneDepth * View.VolumetricFogGridZParams.x + View.VolumetricFogGridZParams.y) * View.VolumetricFogGridZParams.z * View.VolumetricFogInvGridSize.z;
}
float3 ComputeVolumeUVFromNDC(float4 NDCPosition)
{
	NDCPosition.xy /= NDCPosition.w;
	float3 VolumeUV = float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, ComputeNormalizedZSliceFromDepth(NDCPosition.w));
	return min(VolumeUV * float3(View.VolumetricFogScreenToResourceUV.xy, 1.0), float3(View.VolumetricFogUVMax, 1.0));
}
Texture2D ShadowDepthTexture;
SamplerState ShadowDepthTextureSampler;
float4 ShadowBufferSize;
TextureCube ShadowDepthCubeTexture;
SamplerComparisonState ShadowDepthCubeTextureSampler;
float4x4 ShadowViewProjectionMatrices[6];
float InvShadowmapResolution;
float CubemapHardwarePCF(
	TextureCube InShadowDepthCubeTexture, SamplerComparisonState InShadowDepthCubeTextureSampler, float4x4 InShadowViewProjectionMatrices[6], float InInvShadowmapResolution,
	float3 WorldPosition, float3 LightPosition, float LightInvRadius, float DepthBias, float SlopeDepthBias, float MaxSlopeDepthBias)
{
	float Shadow = 1;
	float3 WorldSampleToLightVec = LightPosition - WorldPosition.xyz;
	float Distance = length(WorldSampleToLightVec);
	[branch]
	if (Distance * LightInvRadius < 1.0f)
	{
		float3 NormalizedLightVector = WorldSampleToLightVec / Distance;
		float3 SideVector = normalize(cross(NormalizedLightVector, float3(0, 0, 1)));
		float3 UpVector = cross(SideVector, NormalizedLightVector);
		SideVector *= InvShadowmapResolution;
		UpVector *= InvShadowmapResolution;
		float3 AbsLightVector = abs(WorldSampleToLightVec);
		float MaxCoordinate = max(AbsLightVector.x, max(AbsLightVector.y, AbsLightVector.z));
		int CubeFaceIndex = 0;
		if (MaxCoordinate == AbsLightVector.x)
		{
			CubeFaceIndex = AbsLightVector.x == WorldSampleToLightVec.x ? 0 : 1;
		}
		else if (MaxCoordinate == AbsLightVector.y)
		{
			CubeFaceIndex = AbsLightVector.y == WorldSampleToLightVec.y ? 2 : 3;
		}
		else
		{
			CubeFaceIndex = AbsLightVector.z == WorldSampleToLightVec.z ? 4 : 5;
		}
		float4 ShadowPosition = mul(float4(-WorldSampleToLightVec, 1), InShadowViewProjectionMatrices[CubeFaceIndex]);
		float CompareDistance = ShadowPosition.z / ShadowPosition.w;
		float ShadowDepthBias = - (DepthBias + SlopeDepthBias) / ShadowPosition.w;
		Shadow = 0;
		Shadow = InShadowDepthCubeTexture.SampleCmpLevelZero(InShadowDepthCubeTextureSampler, WorldSampleToLightVec, CompareDistance - ShadowDepthBias);
	}
	return 1.0f - Shadow;
}
float CubemapHardwarePCF(
	float3 WorldPosition, float3 LightPosition, float LightInvRadius, float DepthBias, float SlopeDepthBias, float MaxSlopeDepthBias)
{
	return CubemapHardwarePCF(ShadowDepthCubeTexture, ShadowDepthCubeTextureSampler, ShadowViewProjectionMatrices, InvShadowmapResolution,
		WorldPosition, LightPosition, LightInvRadius, DepthBias, SlopeDepthBias, MaxSlopeDepthBias);
}
float GetSubSurfaceTransmission( float OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }
float4 GetSubSurfaceTransmission( float4 OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }
struct FPCFSamplerSettings
{
	Texture2D		ShadowDepthTexture;
	SamplerState	ShadowDepthTextureSampler;
	float4			ShadowBufferSize;
	float			SceneDepth;
	float			TransitionScale;
	bool			bSubsurface;
	bool			bTreatMaxDepthUnshadowed;
	float			DensityMulConstant;
	float2			ProjectionDepthBiasParameters;
};
float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);
	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}
float4 CalculateOcclusion(float4 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		float4 OccluderDistance = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float4 Occlusion = GetSubSurfaceTransmission(OccluderDistance, Settings.DensityMulConstant);
		return  select_internal( ShadowmapDepth > .99f , 1.0f , Occlusion );
	}
	else
	{
		float TransitionScale = Settings.TransitionScale;
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float4 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);
		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}
		return ShadowFactor;
	}
}
float3 CalculateOcclusion(float3 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		float3 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float3 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));
		return  select_internal( ShadowmapDepth > .99f , 1.0 , Occlusion );
	}
	else
	{
		float TransitionScale = Settings.TransitionScale;
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float3 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);
		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}
		return ShadowFactor;
	}
}
float Manual1x1PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
	float2 Fraction = frac(TexelPos);
	float4 Samples;
	float2 QuadCenter = floor(TexelPos) + 1.0f;	
	Samples = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, QuadCenter * Settings.ShadowBufferSize.zw);
	float4 Values00 = CalculateOcclusion(Samples, Settings);
	return PCF1x1(Fraction, Values00);
}
float ComputeLight0VolumeShadowing(
	float3 TranslatedWorldPositionForLighting, bool bPointLight, bool bSpotLight, inout bool bShadowFactorValid)
{
	float ShadowFactor = 1;
	bShadowFactorValid = false;
	[branch]
	if ( RenderVolumetricCloudParameters.bStaticallyShadowed  )
	{
		bool bUsePointLightShadowing = bPointLight;
		[branch]
		if (bUsePointLightShadowing)
		{
			float3 LightVector = TranslatedWorldPositionForLighting - RenderVolumetricCloudParameters.TranslatedWorldPosition;
			float DistanceToLight = length(LightVector);
			float3 NormalizedLightVector = LightVector / DistanceToLight;
			float NormalizedTheta = atan2(NormalizedLightVector.y, NormalizedLightVector.x) / (2 * PI);
			float U = NormalizedTheta > 0 ? NormalizedTheta : 1 + NormalizedTheta;
			float V = acos(NormalizedLightVector.z) / PI;
			float2 UnwrappedUVs = float2(U, V);
			float ShadowDepth = Texture2DSampleLevel( RenderVolumetricCloudParameters_StaticShadowDepthTexture  ,  RenderVolumetricCloudParameters_StaticShadowDepthTextureSampler  , UnwrappedUVs, 0).x;
			ShadowFactor = DistanceToLight * RenderVolumetricCloudParameters.InvRadius < ShadowDepth;
			bShadowFactorValid = true;
		}
		else
		{
			float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPositionForLighting, 1),  RenderVolumetricCloudParameters.TranslatedWorldToStaticShadowMatrix  );
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
			if (all( and_internal( ShadowUVs >= 0 , ShadowUVs <= 1 )))
			{
				FPCFSamplerSettings Settings;
				Settings.ShadowDepthTexture =  RenderVolumetricCloudParameters_StaticShadowDepthTexture  ;
				Settings.ShadowDepthTextureSampler =  RenderVolumetricCloudParameters_StaticShadowDepthTextureSampler  ;
				Settings.ShadowBufferSize =  RenderVolumetricCloudParameters.StaticShadowBufferSize  ;
				Settings.SceneDepth = HomogeneousShadowPosition.z;
				Settings.TransitionScale = 40;
				Settings.bSubsurface = false;
				Settings.bTreatMaxDepthUnshadowed = true;
				Settings.DensityMulConstant = 0;
				Settings.ProjectionDepthBiasParameters = float2(0, 0);
				ShadowFactor = Manual1x1PCF(ShadowUVs, Settings);
				bShadowFactorValid = true;
			}
		}
	}		
	bool bUseCubemapShadowing = bPointLight;
	float DynamicShadowFactor = 1;
	if (bUseCubemapShadowing)
	{
		bShadowFactorValid = true;
		const float DepthBias = 0.03f * 512 *  RenderVolumetricCloudParameters.InvShadowmapResolution  ;
		const float SlopeDepthBias = 0;
		const float MaxSlopeDepthBias = 0;
		DynamicShadowFactor = CubemapHardwarePCF(
			 RenderVolumetricCloudParameters_ShadowDepthCubeTexture  ,  RenderVolumetricCloudParameters_ShadowDepthCubeTextureSampler  ,  RenderVolumetricCloudParameters.ShadowViewProjectionMatrices  ,  RenderVolumetricCloudParameters.InvShadowmapResolution  ,
			TranslatedWorldPositionForLighting, RenderVolumetricCloudParameters.TranslatedWorldPosition, RenderVolumetricCloudParameters.InvRadius, DepthBias, SlopeDepthBias, MaxSlopeDepthBias);
	}
	else
	{
		float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPositionForLighting, 1),  RenderVolumetricCloudParameters.TranslatedWorldToShadowMatrix  );
		float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
		float SceneDepth = 1.0f - HomogeneousShadowPosition.z;
		if (all(ShadowUVs >=  RenderVolumetricCloudParameters.ShadowmapMinMax.xy  ) && all(ShadowUVs <=  RenderVolumetricCloudParameters.ShadowmapMinMax.zw  ))
		{
			bShadowFactorValid = true;
			float ShadowDepth = Texture2DSampleLevel( RenderVolumetricCloudParameters_ShadowDepthTexture  ,  RenderVolumetricCloudParameters_ShadowDepthTextureSampler  , ShadowUVs, 0).x;
			DynamicShadowFactor = SceneDepth < ShadowDepth -  RenderVolumetricCloudParameters.DepthBiasParameters.x  ;
			DynamicShadowFactor = saturate(DynamicShadowFactor + (ShadowDepth == 1.0f));
		}
	}
	if (!bPointLight && !bSpotLight)
	{
		float Depth = dot(TranslatedWorldPositionForLighting - GetPrimaryView().TranslatedWorldCameraOrigin, View.ViewForward);
		float DistanceFade = saturate(Depth *  RenderVolumetricCloudParameters.ShadowInjectParams.z   +  RenderVolumetricCloudParameters.ShadowInjectParams.w  );
		DynamicShadowFactor = lerp(DynamicShadowFactor, 1.0f, DistanceFade * DistanceFade);
	}
	ShadowFactor = min(ShadowFactor, DynamicShadowFactor);
	return ShadowFactor;
}
bool IsSinglePageVirtualShadowMap(int VirtualShadowMapId)
{
	return VirtualShadowMapId < (1024U * 8U);
}
uint CalcLog2LevelDimsPages(uint Level)
{
	return 7 - Level;	
}
uint CalcLevelDimsTexels(uint Level)
{
	return uint(16384) >> Level;
}
uint CalcLevelOffsets(uint Level)
{
	uint NumBits = Level << 1;
	uint StartBit = (2 * 7 + 2) - NumBits;
	uint Mask = ((1u << NumBits) - 1u) << StartBit;
	return 0x55555555u & Mask;
}
struct FVirtualSMLevelOffset
{
	bool bIsSinglePageSM;
	uint LevelOffset;
};
uint CalcFullPageTableLevelOffset(uint VirtualShadowMapId, uint Level)
{
	 { };
	return (1024U * 8U) + (VirtualShadowMapId - (1024U * 8U)) * 21845 + CalcLevelOffsets(Level);
}
uint CalcPageOffsetInFullLevel(uint Level, uint2 PageAddress)
{
	return PageAddress.x + (PageAddress.y << CalcLog2LevelDimsPages(Level));
}
uint CalcPageOffset(FVirtualSMLevelOffset LevelOffset, uint Level, uint2 PageAddress)
{
	 { };
	uint Result = LevelOffset.LevelOffset;
	if (!LevelOffset.bIsSinglePageSM)
	{
		Result += CalcPageOffsetInFullLevel(Level, PageAddress);
	}
	return Result;
}
uint CalcPageOffset(uint VirtualShadowMapId, uint Level, uint2 PageAddress)
{
	if (IsSinglePageVirtualShadowMap(VirtualShadowMapId))
	{
		return VirtualShadowMapId;
	}
	return CalcFullPageTableLevelOffset(VirtualShadowMapId, Level) + CalcPageOffsetInFullLevel(Level, PageAddress);
}
struct FShadowPhysicalPage
{
	uint2 PhysicalAddress;	
	uint LODOffset;			
	bool bAnyLODValid;		
	bool bThisLODValid;		
};
FShadowPhysicalPage ShadowDecodePageTable(uint Value)
{
	FShadowPhysicalPage Result;
	Result.PhysicalAddress = uint2(Value & 0x3FF, (Value >> 10) & 0x3FF);
	Result.LODOffset = (Value >> 20) & 0x3F;
	Result.bAnyLODValid = (Value & 0x80000000) != 0;
	Result.bThisLODValid = Result.bAnyLODValid && Result.LODOffset == 0;
	return Result;
}
FShadowPhysicalPage ShadowGetPhysicalPage(uint PageOffset)
{
	return ShadowDecodePageTable(VirtualShadowMap_PageTable[PageOffset]);
}
struct FVirtualShadowMapProjectionShaderData
{
	float4x4 ShadowViewToClipMatrix;
	float4x4 TranslatedWorldToShadowUVMatrix;
	float4x4 TranslatedWorldToShadowUVNormalMatrix;
	float3 LightDirection;
	uint LightType;		
	FDFVector3 PreViewTranslation;
	float LightRadius;
	float ResolutionLodBias;
	float3 ClipmapWorldOriginOffset; 
	int2 ClipmapCornerRelativeOffset;
	int ClipmapLevel;					
	int ClipmapLevelCountRemaining;		
	uint Flags;
	float ClipmapLevelWPODistanceDisabledThresholdSquared;
	float LightSourceRadius;
	int VirtualShadowMapId;
	bool bUnCached; 
	bool bUnreferenced; 
	float TexelDitherScale; 
};
FVirtualShadowMapProjectionShaderData DecodeVirtualShadowMapProjectionData(ByteAddressBuffer ProjectionData, int VirtualShadowMapId)
{
	FVirtualShadowMapProjectionShaderData Result;
	Result.VirtualShadowMapId = VirtualShadowMapId;
	const uint Stride = 16 * 18;
	const uint Base = VirtualShadowMapId * Stride;
	Result.ShadowViewToClipMatrix[0]				= asfloat(ProjectionData.Load4(Base + 16*0));
	Result.ShadowViewToClipMatrix[1]				= asfloat(ProjectionData.Load4(Base + 16*1));
	Result.ShadowViewToClipMatrix[2]				= asfloat(ProjectionData.Load4(Base + 16*2));
	Result.ShadowViewToClipMatrix[3]				= asfloat(ProjectionData.Load4(Base + 16*3));
	Result.TranslatedWorldToShadowUVMatrix[0]		= asfloat(ProjectionData.Load4(Base + 16*4));
	Result.TranslatedWorldToShadowUVMatrix[1]		= asfloat(ProjectionData.Load4(Base + 16*5));
	Result.TranslatedWorldToShadowUVMatrix[2]		= asfloat(ProjectionData.Load4(Base + 16*6));
	Result.TranslatedWorldToShadowUVMatrix[3]		= asfloat(ProjectionData.Load4(Base + 16*7));
	Result.TranslatedWorldToShadowUVNormalMatrix[0]	= asfloat(ProjectionData.Load4(Base + 16*8));
	Result.TranslatedWorldToShadowUVNormalMatrix[1]	= asfloat(ProjectionData.Load4(Base + 16*9));
	Result.TranslatedWorldToShadowUVNormalMatrix[2]	= asfloat(ProjectionData.Load4(Base + 16*10));
	Result.TranslatedWorldToShadowUVNormalMatrix[3]	= asfloat(ProjectionData.Load4(Base + 16*11));
	Result.LightDirection					= asfloat(ProjectionData.Load3(Base + (16*12 + 4*0)));
	Result.LightType						=		 (ProjectionData.Load (Base + (16*12 + 4*3)));
	float3 PreViewTranslationHigh			= asfloat(ProjectionData.Load3(Base + (16*13 + 4*0)));
	Result.LightRadius						= asfloat(ProjectionData.Load (Base + (16*13 + 4*3)));
	float3 PreViewTranslationLow			= asfloat(ProjectionData.Load3(Base + (16*14 + 4*0)));
	Result.ResolutionLodBias				= asfloat(ProjectionData.Load (Base + (16*14 + 4*3)));
	float3 NegativeClipmapWorldOriginOffset = asfloat(ProjectionData.Load3(Base + (16*15 + 4*0)));
	Result.LightSourceRadius				= asfloat(ProjectionData.Load (Base + (16*15 + 4*3)));
	Result.ClipmapCornerRelativeOffset		= asint  (ProjectionData.Load2(Base + (16*16 + 4*0)));
	Result.ClipmapLevel						= asint  (ProjectionData.Load (Base + (16*16 + 4*2)));
	Result.ClipmapLevelCountRemaining		= asint  (ProjectionData.Load (Base + (16*16 + 4*3)));
	Result.Flags 							=		 (ProjectionData.Load (Base + (16*17 + 4*0)));
	Result.ClipmapLevelWPODistanceDisabledThresholdSquared
		                                    = asfloat(ProjectionData.Load (Base + (16*17 + 4*1)));
	Result.TexelDitherScale					= asfloat(ProjectionData.Load (Base + (16*17 + 4*2)));
	Result.PreViewTranslation				= MakeDFVector3(PreViewTranslationHigh, PreViewTranslationLow);
	Result.ClipmapWorldOriginOffset			= -NegativeClipmapWorldOriginOffset;
	Result.bUnCached = (Result.Flags & (1U << 1)) != 0U;
	Result.bUnreferenced = (Result.Flags & (1U << 2)) != 0U;
	return Result;
}
FVirtualShadowMapProjectionShaderData GetVirtualShadowMapProjectionData(int VirtualShadowMapId)
{
	return DecodeVirtualShadowMapProjectionData(VirtualShadowMap_ProjectionData, VirtualShadowMapId);
}
float CalcAbsoluteClipmapLevel(FVirtualShadowMapProjectionShaderData BaseProjectionData, float3 TranslatedWorldPosition)
{
	float3 ViewToShadowTranslation = DFFastLocalSubtractDemote(BaseProjectionData.PreViewTranslation, GetPrimaryView().PreViewTranslation);
	float3 TranslatedWorldOrigin = -BaseProjectionData.ClipmapWorldOriginOffset + ViewToShadowTranslation;
	float DistanceToClipmapOrigin = length(TranslatedWorldPosition + TranslatedWorldOrigin);
	return log2(DistanceToClipmapOrigin);
}
float CalcBiasedAbsoluteClipmapLevelForSampling(FVirtualShadowMapProjectionShaderData BaseProjectionData, float3 TranslatedWorldPosition)
{
	float AbsoluteLevel = CalcAbsoluteClipmapLevel(BaseProjectionData, TranslatedWorldPosition);
	AbsoluteLevel += VirtualShadowMap.bClipmapGreedyLevelSelection ? 0.0f : BaseProjectionData.ResolutionLodBias;
	return AbsoluteLevel;
}
struct FVirtualShadowMapSample
{
	float Depth;
	uint MipLevel;
	int VirtualShadowMapId;		
	bool bValid;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};
FVirtualShadowMapSample InitVirtualShadowMapSample()
{
	FVirtualShadowMapSample Result;
	Result.Depth = 0.0f;
	Result.MipLevel = 0;
	Result.VirtualShadowMapId = -1; 
	Result.bValid = false;
	Result.VirtualTexelAddress = Result.PhysicalTexelAddress = uint2(0U, 0U);
	Result.VirtualTexelAddressFloat = float2(0.0f, 0.0f);
	return Result;
}
float SampleVirtualShadowMapPhysicalDepth(uint2 PhysicalTexelAddress)
{
	return asfloat(VirtualShadowMap_PhysicalPagePool.Load(uint4(PhysicalTexelAddress, 0, 0)));
}
struct FVirtualShadowMapClipmapRelativeTransform
{
	float Scale;
	float3 Bias;
};
FVirtualShadowMapClipmapRelativeTransform CalcClipmapRelativeTransform(int ClipmapId, int LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);
	float2 OffsetA = float2(ProjectionDataA.ClipmapCornerRelativeOffset);
	float2 OffsetB = float2(ProjectionDataB.ClipmapCornerRelativeOffset);
	FVirtualShadowMapClipmapRelativeTransform Result;
	Result.Scale = LevelOffset >= 0 ? rcp(float(1U << LevelOffset)) : float(1U << (-LevelOffset));
	Result.Bias.xy = 0.25f * (OffsetB - Result.Scale * OffsetA);
	float OffsetZA = ProjectionDataA.ShadowViewToClipMatrix[3][2];
	float OffsetZB = ProjectionDataB.ShadowViewToClipMatrix[3][2];
	Result.Bias.z = OffsetZB - Result.Scale * OffsetZA;
	return Result;
}
uint2 CalcClipmapOffsetLevelPage(uint2 BasePage, int ClipmapId, uint LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);
	const int OffsetScale = (128 >> 2);
	int2 BasePageOffset  = OffsetScale * ProjectionDataA.ClipmapCornerRelativeOffset;
	int2 LevelPageOffset = OffsetScale * ProjectionDataB.ClipmapCornerRelativeOffset;
	return (BasePage - BasePageOffset + (LevelPageOffset << LevelOffset)) >> LevelOffset;
}
FVirtualShadowMapSample SampleVirtualShadowMapClipmap(int VirtualShadowMapId, float2 ShadowMapUV)
{
	FVirtualShadowMapSample Result = InitVirtualShadowMapSample();
	uint2 BasePage = uint2(ShadowMapUV * 128);
	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapId, 0, BasePage));
	if (PhysicalPageEntry.bAnyLODValid)
	{	
		uint ClipmapLevelOffset = PhysicalPageEntry.LODOffset;
		int ClipmapLevelId = VirtualShadowMapId + ClipmapLevelOffset;
		Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(0));
		Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
		float DepthLevelScale = 1.0f;
		float DepthLevelBias = 0.0f;
		if (ClipmapLevelOffset > 0)
		{
			uint2 vPage = CalcClipmapOffsetLevelPage(BasePage, VirtualShadowMapId, ClipmapLevelOffset);
			uint2 VirtualTexelAddressMin = vPage * 128;
			uint2 VirtualTexelAddressMax = VirtualTexelAddressMin + (128 - 1);
			FVirtualShadowMapClipmapRelativeTransform Transform = CalcClipmapRelativeTransform(VirtualShadowMapId, ClipmapLevelOffset);
			float2 ClipmapUV = ShadowMapUV * Transform.Scale + Transform.Bias.xy;
			DepthLevelScale = Transform.Scale;
			DepthLevelBias = Transform.Bias.z;
			Result.VirtualTexelAddressFloat = ClipmapUV * float(CalcLevelDimsTexels(0));
			Result.VirtualTexelAddress = clamp(uint2(Result.VirtualTexelAddressFloat), VirtualTexelAddressMin, VirtualTexelAddressMax);
			PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(ClipmapLevelId, 0, vPage));
		}
		if (PhysicalPageEntry.bThisLODValid)
		{
			Result.PhysicalTexelAddress = 
				PhysicalPageEntry.PhysicalAddress * 128 +
				(Result.VirtualTexelAddress & 127);
			Result.Depth = (SampleVirtualShadowMapPhysicalDepth(Result.PhysicalTexelAddress) - DepthLevelBias) / DepthLevelScale;
			Result.MipLevel = 0;
			Result.VirtualShadowMapId = ClipmapLevelId;
			Result.bValid = true;
		}
	}
	return Result;
}
float ComputeVirtualShadowMapOptimalSlopeBias(
	int RequestedVirtualShadowMapId,
	FVirtualShadowMapSample SmSample,
	float3 TranslatedWorldPosition,
	float3 EstimatedGeoWorldNormal,
	bool bClamp = true)
{
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(SmSample.VirtualShadowMapId);
	float4 NormalPlaneTranslatedWorld = float4(EstimatedGeoWorldNormal, -dot(EstimatedGeoWorldNormal, TranslatedWorldPosition));
	float4 NormalPlaneUV = mul(NormalPlaneTranslatedWorld, ProjectionData.TranslatedWorldToShadowUVNormalMatrix);
	float2 DepthSlopeUV = -NormalPlaneUV.xy / NormalPlaneUV.z;
	float MipLevelDim = float(CalcLevelDimsTexels(SmSample.MipLevel));
	float2 TexelCenter = float2(SmSample.VirtualTexelAddress) + 0.5f;
	float2 TexelCenterOffset = TexelCenter - SmSample.VirtualTexelAddressFloat;
	float2 TexelCenterOffsetUV = TexelCenterOffset / MipLevelDim;
	float OptimalSlopeBias = 2.0f * max(0.0f, dot(DepthSlopeUV, TexelCenterOffsetUV));
	OptimalSlopeBias = bClamp ? min(OptimalSlopeBias, abs(100.0f * ProjectionData.ShadowViewToClipMatrix._33)) : OptimalSlopeBias;
	OptimalSlopeBias *= float(1u << (SmSample.VirtualShadowMapId - RequestedVirtualShadowMapId));
	return OptimalSlopeBias;
}
float ComputeOccluderDistanceOrtho(float4x4 ShadowViewToClip, float OccluderDepth, float ReceiverDepth)
{
	float OccluderViewZ = (OccluderDepth - ShadowViewToClip._43) / ShadowViewToClip._33;
	float ReceiverViewZ = (ReceiverDepth - ShadowViewToClip._43) / ShadowViewToClip._33;
	float Result = ReceiverViewZ - OccluderViewZ;
	return max(1e-6f, Result);
}
struct FVirtualShadowMapSampleResult
{
	bool bValid;
	float ShadowFactor;	
	float OccluderDistance;
	int ClipmapOrMipLevel;		
	uint RayCount;
	uint2 VirtualTexelAddress;
	uint2 PhysicalTexelAddress;
	float3 GeneralDebug;		
};
FVirtualShadowMapSampleResult InitVirtualShadowMapSampleResult()
{
	FVirtualShadowMapSampleResult Result;
	Result.bValid = false;
	Result.ShadowFactor = 1.0f;
	Result.OccluderDistance = -1.0f;
	Result.ClipmapOrMipLevel = 0;
	Result.VirtualTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.PhysicalTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.RayCount = 0;
	Result.GeneralDebug = float3(0, 0, 0);
	return Result;
}
FVirtualShadowMapSampleResult SampleVirtualShadowMapDirectional(
	int VirtualShadowMapId,
	float3 TranslatedWorldPosition,
	float RayStartDistance,
	float3 EstimatedGeoWorldNormal,
	bool bUseOptimalBias = true)
{
	RayStartDistance = max(RayStartDistance, 0.0f);
	FVirtualShadowMapProjectionShaderData BaseProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);
	 { };
	const int ClipmapLevel = int(floor(CalcBiasedAbsoluteClipmapLevelForSampling(BaseProjectionData, TranslatedWorldPosition)));
	int ClipmapIndex = max(0, ClipmapLevel - BaseProjectionData.ClipmapLevel);
	if (ClipmapIndex < BaseProjectionData.ClipmapLevelCountRemaining)
	{
		int ClipmapLevelVirtualShadowMapId = VirtualShadowMapId + ClipmapIndex;
		FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(ClipmapLevelVirtualShadowMapId);
		float3 ViewToShadowTranslation = DFFastLocalSubtractDemote(ProjectionData.PreViewTranslation, GetPrimaryView().PreViewTranslation);
		float3 ShadowTranslatedWorldPosition = TranslatedWorldPosition + ViewToShadowTranslation;
		float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), ProjectionData.TranslatedWorldToShadowUVMatrix);
		FVirtualShadowMapSample SmSample;
		SmSample = SampleVirtualShadowMapClipmap(ClipmapLevelVirtualShadowMapId, ShadowUVz.xy);
		if (SmSample.bValid)
		{
			int SampledClipmapIndex = SmSample.VirtualShadowMapId - VirtualShadowMapId;
			FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
			Result.bValid = true;
			Result.ShadowFactor = 1.0f;
			Result.OccluderDistance = -1.0f;
			Result.ClipmapOrMipLevel = GetVirtualShadowMapProjectionData(SmSample.VirtualShadowMapId).ClipmapLevel;
			Result.VirtualTexelAddress = SmSample.VirtualTexelAddress;
			Result.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
			Result.RayCount = 1;
			float OptimalSlopeBias = 0.0f;
			[branch]
			if (bUseOptimalBias)
			{
				OptimalSlopeBias = ComputeVirtualShadowMapOptimalSlopeBias(ClipmapLevelVirtualShadowMapId, SmSample, ShadowTranslatedWorldPosition, EstimatedGeoWorldNormal);
			}
			float RayStartBias = -RayStartDistance * ProjectionData.ShadowViewToClipMatrix._33;
			float BiasedDepth = SmSample.Depth - OptimalSlopeBias - RayStartBias;
			if (BiasedDepth > ShadowUVz.z)
			{
				Result.ShadowFactor = 0.0f;
				Result.OccluderDistance = ComputeOccluderDistanceOrtho(
					ProjectionData.ShadowViewToClipMatrix,
					SmSample.Depth,
					ShadowUVz.z);
			}
			return Result;
		}
	}
	return InitVirtualShadowMapSampleResult();
}
FVirtualShadowMapSampleResult SampleVirtualShadowMapDirectional(int VirtualShadowMapId, float3 TranslatedWorldPosition, float RayStartDistance = 0.0f)
{
	return SampleVirtualShadowMapDirectional(VirtualShadowMapId, TranslatedWorldPosition, RayStartDistance, float3(0, 0, 0), false);
}
float SamplePhaseFunction(in float PhaseCosTheta, in float PhaseG, in float PhaseG2, in float PhaseBlend)
{
	PhaseG = clamp(PhaseG, -0.999f, 0.999f);
	PhaseG2 = clamp(PhaseG2, -0.999f, 0.999f);
	PhaseBlend = clamp(PhaseBlend, 0.0f, 1.0f);
	float MiePhaseValueLight0 = HenyeyGreensteinPhase(PhaseG, -PhaseCosTheta);	
	float MiePhaseValueLight1 = HenyeyGreensteinPhase(PhaseG2, -PhaseCosTheta);
	const float Phase = MiePhaseValueLight0 + PhaseBlend * (MiePhaseValueLight1 - MiePhaseValueLight0);
	return Phase;
}
struct ParticipatingMediaContext
{
	float3 ScatteringCoefficients[(1 + 2)];
	float3 ExtinctionCoefficients[(1 + 2)];
	float3 TransmittanceToLight0[(1 + 2)];
	float3 TransmittanceToLight1[(1 + 2)];
};
ParticipatingMediaContext SetupParticipatingMediaContext(float3 BaseAlbedo, float3 BaseExtinctionCoefficients, float MsSFactor, float MsEFactor, float3 InitialTransmittanceToLight0, float3 InitialTransmittanceToLight1)
{
	const float3 ScatteringCoefficients = BaseAlbedo * BaseExtinctionCoefficients;
	ParticipatingMediaContext PMC;
	PMC.ScatteringCoefficients[0] = ScatteringCoefficients;
	PMC.ExtinctionCoefficients[0] = BaseExtinctionCoefficients;
	PMC.TransmittanceToLight0[0] = InitialTransmittanceToLight0;
	PMC.TransmittanceToLight1[0] = InitialTransmittanceToLight1;
	[unroll]
	for (int ms = 1; ms < (1 + 2); ++ms)
	{
		PMC.ScatteringCoefficients[ms] = PMC.ScatteringCoefficients[ms - 1] * MsSFactor;
		PMC.ExtinctionCoefficients[ms] = PMC.ExtinctionCoefficients[ms - 1] * MsEFactor;
		MsSFactor *= MsSFactor;
		MsEFactor *= MsEFactor;
		PMC.TransmittanceToLight0[ms] = InitialTransmittanceToLight0;
		PMC.TransmittanceToLight1[ms] = InitialTransmittanceToLight1;
	}
	return PMC;
}
struct ParticipatingMediaPhaseContext
{
	float Phase0[(1 + 2)];
	float Phase1[(1 + 2)];
};
ParticipatingMediaPhaseContext SetupParticipatingMediaPhaseContext(float BasePhase0, float BasePhase1, float MsPhaseFactor)
{
	ParticipatingMediaPhaseContext PMPC;
	PMPC.Phase0[0] = BasePhase0;
	PMPC.Phase1[0] = BasePhase1;
	[unroll]
	for (int ms = 1; ms < (1 + 2); ++ms)
	{
		PMPC.Phase0[ms] = lerp(IsotropicPhase(), PMPC.Phase0[0], MsPhaseFactor);
		PMPC.Phase1[ms] = lerp(IsotropicPhase(), PMPC.Phase1[0], MsPhaseFactor);
		MsPhaseFactor *= MsPhaseFactor;
	}
	return PMPC;
}
void MainCommon(in FMaterialPixelParameters MaterialParameters, in float4 SvPosition, 
	inout float4 OutColor0
	, inout float4 OutDepth
	, inout float  OutHoldOutCoverage
	, inout float  OutAboveCloudHoldOut)
{
	ResolvedView = ResolveView();
	OutColor0					= float4(0.0f, 0.0f, 0.0f, 1.0f);
	OutDepth					= MaxHalfFloat;
	FPixelMaterialInputs PixelMaterialInputs	= (FPixelMaterialInputs)0;
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, true);
	float3 RayWorldOriginKm				= DFDemote(ResolvedView.WorldCameraOrigin) * (1.0f / (1000.0f * 100.0f));
	float3 RayTranslatedWorldOriginKm	= View.TranslatedWorldCameraOrigin * (1.0f / (1000.0f * 100.0f));
	float3 Raydir						= -MaterialParameters.CameraVector;
	float TMin							= -999999999.0f;
	float TMax							= -999999999.0f;
	float3 Luminance			= 0.0f;
	float3 TransmittanceToView	= 1.0f;
	float tAPWeightedSum		= 0.0f;
	float tAPWeightsSum			= 0.0f;
	uint4 TracingCoordToZbufferCoordScaleBias = RenderVolumetricCloudParameters.TracingCoordToZbufferCoordScaleBias;
	uint2 SceneDepthTextureCoord = uint2(SvPosition.xy - 0.5) * TracingCoordToZbufferCoordScaleBias.xy + TracingCoordToZbufferCoordScaleBias.zw;
	SceneDepthTextureCoord = clamp(SceneDepthTextureCoord, RenderVolumetricCloudParameters.SceneDepthTextureMinMaxCoord.xy, RenderVolumetricCloudParameters.SceneDepthTextureMinMaxCoord.zw);
	{
		float DeviceZ = RenderVolumetricCloudParameters_SceneDepthTexture.Load(uint3(SceneDepthTextureCoord, 0)).r;
		float3 DepthBufferTranslatedWorldPos = SvPositionToTranslatedWorld(float4(SvPosition.xy, DeviceZ, 1.0));
		const float TDepthBufferKm = min(length(DepthBufferTranslatedWorldPos * (1.0f / (1000.0f * 100.0f)) - RayTranslatedWorldOriginKm), MaxHalfFloat);
		OutDepth.xyzw = float4(TDepthBufferKm, TDepthBufferKm, DeviceZ, DeviceZ);
	}
	{
		float2 tTop2 = -1.0f;
		float2 tBottom2 = -1.0f;
		if (RayIntersectSphereSolution(RayWorldOriginKm, Raydir, float4(RenderVolumetricCloudParameters.CloudLayerCenterKm, RenderVolumetricCloudParameters.TopRadiusKm), tTop2))
		{
			if (RayIntersectSphereSolution(RayWorldOriginKm, Raydir, float4(RenderVolumetricCloudParameters.CloudLayerCenterKm, RenderVolumetricCloudParameters.BottomRadiusKm), tBottom2))
			{
				float TempTop = all(tTop2 > 0.0f) ? min(tTop2.x, tTop2.y) : max(tTop2.x, tTop2.y);
				float TempBottom = all(tBottom2 > 0.0f) ? min(tBottom2.x, tBottom2.y) : max(tBottom2.x, tBottom2.y);
				if (all(tBottom2 > 0.0f))
				{
					TempTop = max(0.0f, min(tTop2.x, tTop2.y));
				}
				TMin = min(TempBottom, TempTop);
				TMax = max(TempBottom, TempTop);
			}
			else
			{
				TMin = tTop2.x;
				TMax = tTop2.y;
			}
		}
		else
		{
			return;
		}
		TMin = max(0.0f, TMin) * (1000.0f * 100.0f);
		TMax = max(0.0f, TMax) * (1000.0f * 100.0f);
		if (TMax <= TMin || TMin > RenderVolumetricCloudParameters.TracingStartMaxDistance)
		{
			return;
		}
		float DeviceZ = RenderVolumetricCloudParameters_SceneDepthTexture.Load(uint3(SceneDepthTextureCoord, 0)).r;
		DeviceZ = max(0.000000000001, DeviceZ);
		float3 DepthBufferTranslatedWorldPos = SvPositionToTranslatedWorld(float4(SvPosition.xy, DeviceZ, 1.0));
		const float TDepthBufferKm = min(length(DepthBufferTranslatedWorldPos * (1.0f / (1000.0f * 100.0f)) - RayTranslatedWorldOriginKm), MaxHalfFloat);
		OutDepth.y = TDepthBufferKm;
		const bool bDoDepthInteresectionAndTest = RenderVolumetricCloudParameters.OpaqueIntersectionMode >= 2;
		if (bDoDepthInteresectionAndTest && (TDepthBufferKm * (1000.0f * 100.0f)) < TMin)
		{
			return;
		}
		if (bDoDepthInteresectionAndTest)
		{
			TMax = min(TMax, TDepthBufferKm * (1000.0f * 100.0f));
		}
		const float3 Light0Illuminance = ResolvedView.AtmosphereLightIlluminanceOuterSpace[0].rgb;
		const float3 Light0IlluminanceFinal = Light0Illuminance * (RenderVolumetricCloudParameters.EnableAtmosphericLightsSampling ? RenderVolumetricCloudParameters.AtmosphericLightCloudScatteredLuminanceScale[0].rgb : float3(0.0f, 0.0f, 0.0f));
		const float3 Light0Direction = ResolvedView.AtmosphereLightDirection[0].xyz;
		const float3 Light1Illuminance = ResolvedView.AtmosphereLightIlluminanceOuterSpace[1].rgb;
		const float3 Light1IlluminanceFinal = Light1Illuminance * (RenderVolumetricCloudParameters.EnableAtmosphericLightsSampling ? RenderVolumetricCloudParameters.AtmosphericLightCloudScatteredLuminanceScale[1].rgb : float3(0.0f, 0.0f, 0.0f));
		const float3 Light1Direction = ResolvedView.AtmosphereLightDirection[1].xyz;
		const bool bTracingMaxDistanceModeFromCamera = RenderVolumetricCloudParameters.TracingMaxDistanceMode == 1;
		if (RenderVolumetricCloudParameters.TracingMaxDistanceMode == 0)
		{
			const float MarchingDistance = min(RenderVolumetricCloudParameters.TracingMaxDistance, TMax - TMin);
			TMax = TMin + MarchingDistance;
		}
		else 
		{
			TMin = min(RenderVolumetricCloudParameters.TracingMaxDistance, TMin);
			const float MaxBottom = max(tBottom2.x, tBottom2.y) * (1000.0f * 100.0f);
			if (all(tBottom2 > 0.0f) && (MaxBottom <= RenderVolumetricCloudParameters.TracingMaxDistance))
			{
				TMax = min(RenderVolumetricCloudParameters.TracingMaxDistance, max(tTop2.x, tTop2.y) * (1000.0f * 100.0f));
			}
			else
			{
				TMax = min(TMax, RenderVolumetricCloudParameters.TracingMaxDistance);
			}
			if ((TMax - TMin) <= 0.0f)
			{
				return;
			}
		}
		TMin = max(TMin, RenderVolumetricCloudParameters.TracingStartDistanceFromCamera);
		TMax = max(TMin, TMax);
		const uint  IStepCount = max(RenderVolumetricCloudParameters.SampleCountMin, RenderVolumetricCloudParameters.SampleCountMax * saturate((TMax - TMin) * RenderVolumetricCloudParameters.InvDistanceToSampleCountMax));
		const float StepCount = float(IStepCount);
		const float StepT = (TMax - TMin) / StepCount; 
		const float dtMeters = StepT * (1.0f / 100.0f);
		float3 DistantSkyLightLuminance = 0.0f;
		if (RenderVolumetricCloudParameters.EnableDistantSkyLightSampling)
		{
			const bool bSkyAtmospherePresentInScene = ResolvedView.SkyAtmospherePresentInScene > 0.0f;
			if (bSkyAtmospherePresentInScene)
			{
				DistantSkyLightLuminance = Texture2DSampleLevel(View_DistantSkyLightLutTexture, View_DistantSkyLightLutTextureSampler, float2(0.5f, 0.5f), 0.0f).rgb;
			}
			else
			{
				DistantSkyLightLuminance = GetSkySHDiffuseSimple(float3(0.0f, 0.0f, 0.0f)); 
			}
		}
		const float MsScattFactor = saturate(GetVolumetricAdvancedMaterialOutput3(MaterialParameters));
		const float MsExtinFactor = saturate(GetVolumetricAdvancedMaterialOutput4(MaterialParameters));
		const float MsPhaseFactor = saturate(GetVolumetricAdvancedMaterialOutput5(MaterialParameters));
		const float3 wi0 = Light0Direction;
		const float3 wi1 = Light1Direction;
		const float3 wo = Raydir;
		const float Phase0CosTheta = dot(wi0, wo);
		const float Phase1CosTheta = dot(wi1, wo);
		const float PhaseG = GetVolumetricAdvancedMaterialOutput0(MaterialParameters);
		const float PhaseG2 = GetVolumetricAdvancedMaterialOutput1(MaterialParameters);
		const float PhaseBlend = GetVolumetricAdvancedMaterialOutput2(MaterialParameters);
		const float Phase0 = SamplePhaseFunction(Phase0CosTheta, PhaseG, PhaseG2, PhaseBlend);
		const float Phase1 = SamplePhaseFunction(Phase1CosTheta, PhaseG, PhaseG2, PhaseBlend);
		ParticipatingMediaPhaseContext PMPC = SetupParticipatingMediaPhaseContext(Phase0, Phase1, MsPhaseFactor);
		FCloudLayerParameters CloudLayerParams = GetCloudLayerParams(
			RenderVolumetricCloudParameters.CloudLayerCenterKm, RenderVolumetricCloudParameters.PlanetRadiusKm,
			RenderVolumetricCloudParameters.BottomRadiusKm, RenderVolumetricCloudParameters.TopRadiusKm);
		float t = TMin + 0.5 * StepT;
		if (RenderVolumetricCloudParameters.IsReflectionRendering == 0)
		{
			uint2 FullResPixelCoord = SvPosition.xy * RenderVolumetricCloudParameters.TracingCoordToFullResPixelCoordScaleBias.xy; 
			t = TMin + BlueNoiseScalar(FullResPixelCoord, View.StateFrameIndexMod8) * StepT;
		}
		const float StepSizeOnZeroConservativeDensity = RenderVolumetricCloudParameters.StepSizeOnZeroConservativeDensity;
		uint StartStepCount = 0;
		float3 S0 = 0.0f;
		for (uint i = StartStepCount; i < IStepCount; ++i)
		{
			int ms;
			float3	  SampleTranslatedWorldPosition = RayTranslatedWorldOriginKm + t * Raydir;
			UpdateMaterialCloudParam(MaterialParameters, SampleTranslatedWorldPosition,
				ResolvedView, CloudLayerParams, 0.0f, RenderVolumetricCloudParameters.EmptySpaceSkippingSliceDepth);
			if (MaterialParameters.VolumeSampleConservativeDensity.x <= 0.0f)
			{
				i += StepSizeOnZeroConservativeDensity - 1;
				t += StepSizeOnZeroConservativeDensity * StepT;
				continue; 
			}
			if (MaterialParameters.CloudSampleNormAltitudeInLayer <= 0.0f || MaterialParameters.CloudSampleNormAltitudeInLayer >= 1.0f)
			{
				t += StepT;
				continue;
			}
			CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);
			ConvertCloudPixelMaterialInputsToWorkingColorSpace(PixelMaterialInputs);
			const float3 ExtinctionCoefficients = SampleExtinctionCoefficients(PixelMaterialInputs);
			const float3 EmissiveLuminance = 0 ? SampleEmissive(PixelMaterialInputs) : 0.0f;
			const float3 Albedo = SampleAlbedo(PixelMaterialInputs);
			const float3 PlanetCenterToWorldPos = (SampleTranslatedWorldPosition - ResolvedView.SkyPlanetTranslatedWorldCenterAndViewHeight.xyz) * 0.00001f;
			const float3 AtmosphereTransmittanceToLight0 = GetAtmosphereTransmittance(
				PlanetCenterToWorldPos, Light0Direction, ResolvedView.SkyAtmosphereBottomRadiusKm, ResolvedView.SkyAtmosphereTopRadiusKm,
				View_TransmittanceLutTexture, View_TransmittanceLutTextureSampler);
			const float3 AtmosphereTransmittanceToLight1 = GetAtmosphereTransmittance(
				PlanetCenterToWorldPos, Light1Direction, ResolvedView.SkyAtmosphereBottomRadiusKm, ResolvedView.SkyAtmosphereTopRadiusKm,
				View_TransmittanceLutTexture, View_TransmittanceLutTextureSampler);
			ParticipatingMediaContext PMC = SetupParticipatingMediaContext(Albedo, ExtinctionCoefficients, MsScattFactor, MsExtinFactor, AtmosphereTransmittanceToLight0, AtmosphereTransmittanceToLight1);
			float3 DistantLightLuminance = DistantSkyLightLuminance;
			DistantLightLuminance *= saturate(RenderVolumetricCloudParameters.SkyLightCloudBottomVisibility + MaterialParameters.CloudSampleNormAltitudeInLayer);
			if (any(PMC.ScatteringCoefficients[0] > 0.0f))
			{
				const float MaxTransmittanceToView = max(max(TransmittanceToView.rgb.x, TransmittanceToView.rgb.y), TransmittanceToView.rgb.z);
				bool bUnused;
				float OpaqueShadow = ComputeLight0VolumeShadowing(SampleTranslatedWorldPosition, false, false, bUnused);
				if (RenderVolumetricCloudParameters.VirtualShadowMapId0 != -1)
				{
					FVirtualShadowMapSampleResult VirtualShadowMapSample = SampleVirtualShadowMapDirectional(RenderVolumetricCloudParameters.VirtualShadowMapId0, SampleTranslatedWorldPosition);
					OpaqueShadow *= VirtualShadowMapSample.ShadowFactor;
				}
				[unroll]
				for (ms = 0; ms < (1 + 2); ++ms)
				{
					PMC.TransmittanceToLight0[ms] *= OpaqueShadow;
				}
				float3 ExtinctionAcc[(1 + 2)];
				const float ShadowLengthTest = RenderVolumetricCloudParameters.ShadowTracingMaxDistance;
				const float ShadowStepCount = float(RenderVolumetricCloudParameters.ShadowSampleCountMax);
				const float InvShadowStepCount = 1.0f / ShadowStepCount;
				const float ShadowJitteringSeed = float(ResolvedView.StateFrameIndexMod8) + PseudoRandom(SvPosition.xy);
				const float ShadowJitterNorm = 0.5f; 
				[unroll]
				for (ms = 0; ms < (1 + 2); ++ms)
				{
					ExtinctionAcc[ms] = 0.0f;
				}
				const float ShadowDtMeter = ShadowLengthTest * (1.0f / 100.0f);
				float PreviousNormT = 0.0f;
				for (float ShadowT = InvShadowStepCount; ShadowT <= 1.00001f; ShadowT += InvShadowStepCount)
				{
					float CurrentNormT = ShadowT * ShadowT; 
					const float DetlaNormT = CurrentNormT - PreviousNormT;
					const float ExtinctionFactor = DetlaNormT;
					const float ShadowSampleDistance = ShadowLengthTest * (PreviousNormT + DetlaNormT * ShadowJitterNorm);
					const float3 ShadowSampleTranslatedWorldPos = SampleTranslatedWorldPosition + Light0Direction * ShadowSampleDistance;
					UpdateMaterialCloudParam(MaterialParameters, ShadowSampleTranslatedWorldPos,
						ResolvedView, CloudLayerParams, ShadowSampleDistance, 0.0f);
					PreviousNormT = CurrentNormT;
					if (MaterialParameters.VolumeSampleConservativeDensity.x <= 0.0f)
					{
						continue; 
					}
					if (MaterialParameters.CloudSampleNormAltitudeInLayer <= 0.0f || MaterialParameters.CloudSampleNormAltitudeInLayer >= 1.0f)
					{
						break; 
					}
					CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);
					ConvertCloudPixelMaterialInputsToWorkingColorSpace(PixelMaterialInputs);
					float3 ShadowExtinctionCoefficients = SampleExtinctionCoefficients(PixelMaterialInputs);
					ParticipatingMediaContext ShadowPMC = SetupParticipatingMediaContext(0.0f, ShadowExtinctionCoefficients, MsScattFactor, MsExtinFactor, 0.0f, 0.0f);
					[unroll]
					for (ms = 0; ms < (1 + 2); ++ms)
					{
						ExtinctionAcc[ms] += ShadowPMC.ExtinctionCoefficients[ms] * ExtinctionFactor;
					}
				}
				[unroll]
				for (ms = 0; ms < (1 + 2); ++ms)
				{
					PMC.TransmittanceToLight0[ms] *= exp(-ExtinctionAcc[ms] * ShadowDtMeter);
				}
				{ 
					[unroll]
					for (ms = 0; ms < (1 + 2); ++ms)
					{
						ExtinctionAcc[ms] = 0.0f;
					}
					const float ShadowDtMeter = ShadowLengthTest * (1.0f / 100.0f);
					float PreviousNormT = 0.0f;
					for (float ShadowT = InvShadowStepCount; ShadowT <= 1.00001f; ShadowT += InvShadowStepCount)
					{
						float CurrentNormT = ShadowT * ShadowT; 
						const float DetlaNormT = CurrentNormT - PreviousNormT;
						const float ExtinctionFactor = DetlaNormT;
						const float ShadowSampleDistance = ShadowLengthTest * (PreviousNormT + DetlaNormT * ShadowJitterNorm);
						UpdateMaterialCloudParam(MaterialParameters, SampleTranslatedWorldPosition + Light1Direction * ShadowSampleDistance,
							ResolvedView, CloudLayerParams, ShadowSampleDistance, 0.0f);
						PreviousNormT = CurrentNormT;
						if (MaterialParameters.VolumeSampleConservativeDensity.x <= 0.0f)
						{
							continue; 
						}
						if (MaterialParameters.CloudSampleNormAltitudeInLayer <= 0.0f || MaterialParameters.CloudSampleNormAltitudeInLayer >= 1.0f)
						{
							break; 
						}
						CalcPixelMaterialInputs(MaterialParameters, PixelMaterialInputs);
						ConvertCloudPixelMaterialInputsToWorkingColorSpace(PixelMaterialInputs);
						float3 ShadowExtinctionCoefficients = SampleExtinctionCoefficients(PixelMaterialInputs);
						ParticipatingMediaContext ShadowPMC = SetupParticipatingMediaContext(0.0f, ShadowExtinctionCoefficients, MsScattFactor, MsExtinFactor, 0.0f, 0.0f);
						[unroll]
						for (ms = 0; ms < (1 + 2); ++ms)
						{
							ExtinctionAcc[ms] += ShadowPMC.ExtinctionCoefficients[ms] * ExtinctionFactor;
						}
					}
					[unroll]
					for (ms = 0; ms < (1 + 2); ++ms)
					{
						PMC.TransmittanceToLight1[ms] *= exp(-ExtinctionAcc[ms] * ShadowDtMeter);
					}
				} 
				}
			if (any(PMC.ExtinctionCoefficients[0] > 0.0))
			{
				float tAPWeight = min(TransmittanceToView.rgb.r, min(TransmittanceToView.rgb.g, TransmittanceToView.rgb.b));
				tAPWeightedSum += t * tAPWeight;
				tAPWeightsSum += tAPWeight;
			}
			[unroll]
			for (ms = (1 + 2) - 1; ms >= 0; --ms) 
			{
				const float3 ScatteringCoefficients = PMC.ScatteringCoefficients[ms];
				const float3 ExtinctionCoefficients = PMC.ExtinctionCoefficients[ms];
				const float3 TransmittanceToLight0 = PMC.TransmittanceToLight0[ms];
				float3 SunSkyLuminance = TransmittanceToLight0 * Light0IlluminanceFinal * PMPC.Phase0[ms];
				const float3 TransmittanceToLight1 = PMC.TransmittanceToLight1[ms];
				SunSkyLuminance += TransmittanceToLight1 * Light1IlluminanceFinal * PMPC.Phase1[ms];
				SunSkyLuminance += (ms == 0 ? DistantLightLuminance : float3(0.0f, 0.0f, 0.0f));
				const float3 ScatteredLuminance = SunSkyLuminance * ScatteringCoefficients + EmissiveLuminance;
				float3 SafeExtinctionThreshold = 0.000001f;
				const float3 SafeExtinctionCoefficients = max(SafeExtinctionThreshold, ExtinctionCoefficients);
				const float3 SafePathSegmentTransmittance = exp(-SafeExtinctionCoefficients * dtMeters);
				float3 LuminanceIntegral = (ScatteredLuminance - ScatteredLuminance * SafePathSegmentTransmittance) / SafeExtinctionCoefficients;
				const float3 LuminanceContribution = TransmittanceToView * LuminanceIntegral;
				Luminance += LuminanceContribution;
				if (ms == 0)
				{
					TransmittanceToView *= SafePathSegmentTransmittance;
				}
			}
			if (all(TransmittanceToView < RenderVolumetricCloudParameters.StopTracingTransmittanceThreshold) && (!0))
			{
				break;
			}
			t += StepT;
			}
	}
	const float OutputPreExposure = (ResolvedView.RealTimeReflectionCapture ? ResolvedView.RealTimeReflectionCapturePreExposure : ResolvedView.PreExposure);
	const float NoCloudDepth = TMax;
	const float tAP = tAPWeightsSum==0.0f ? NoCloudDepth : tAPWeightedSum / max(0.0000000001f, tAPWeightsSum);
	float MeanTransmittance = dot(TransmittanceToView.rgb, 1.0f / 3.0f);
	float3 FogSampleWorldPositionRelativeToCameraCm = tAP * Raydir;
	float4 ClipPos = mul(float4(RayTranslatedWorldOriginKm * (1000.0f * 100.0f) + FogSampleWorldPositionRelativeToCameraCm, 1.0f), GetPrimaryView().TranslatedWorldToClip);
	if (RenderVolumetricCloudParameters.EnableAerialPerspectiveSampling && tAPWeightsSum > 0.0f)
	{
		float4 AerialPerspective;
		if (!ResolvedView.RealTimeReflectionCapture &&	
			(RenderVolumetricCloudParameters.AerialPerspectiveRayOnlyStartDistanceKm + RenderVolumetricCloudParameters.AerialPerspectiveMieOnlyStartDistanceKm) > 0.0f)
		{
			float4 MieAP =  GetAerialPerspectiveLuminanceTransmittance(		ResolvedView.RealTimeReflectionCapture, ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,		ClipPos, ( FogSampleWorldPositionRelativeToCameraCm - ResolvedView.TranslatedWorldCameraOrigin) * 0.00001f, View_CameraAerialPerspectiveVolumeMieOnly , View_CameraAerialPerspectiveVolumeMieOnlySampler ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution, max(ResolvedView.SkyAtmosphereAerialPerspectiveStartDepthKm, RenderVolumetricCloudParameters.AerialPerspectiveMieOnlyStartDistanceKm) ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,		ResolvedView.OneOverPreExposure, RenderVolumetricCloudParameters.AerialPerspectiveMieOnlyFadeDistanceKmInv );;
			float4 RayAP =  GetAerialPerspectiveLuminanceTransmittance(		ResolvedView.RealTimeReflectionCapture, ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,		ClipPos, ( FogSampleWorldPositionRelativeToCameraCm - ResolvedView.TranslatedWorldCameraOrigin) * 0.00001f, View_CameraAerialPerspectiveVolumeRayOnly , View_CameraAerialPerspectiveVolumeRayOnlySampler ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution, max(ResolvedView.SkyAtmosphereAerialPerspectiveStartDepthKm, RenderVolumetricCloudParameters.AerialPerspectiveRayOnlyStartDistanceKm) ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,		ResolvedView.OneOverPreExposure, RenderVolumetricCloudParameters.AerialPerspectiveRayOnlyFadeDistanceKmInv );;
			AerialPerspective = float4(MieAP.rgb + RayAP.rgb, MieAP.a * RayAP.a);
		}
		else
		{
			const float NearFadeOutRangeInvDepthKm = 1.0 / 0.00001f; 
			AerialPerspective =  GetAerialPerspectiveLuminanceTransmittance(		ResolvedView.RealTimeReflectionCapture, ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,		ClipPos, ( FogSampleWorldPositionRelativeToCameraCm - ResolvedView.TranslatedWorldCameraOrigin) * 0.00001f, View_CameraAerialPerspectiveVolume , View_CameraAerialPerspectiveVolumeSampler ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution, ResolvedView.SkyAtmosphereAerialPerspectiveStartDepthKm ,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,		ResolvedView.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,		ResolvedView.OneOverPreExposure, NearFadeOutRangeInvDepthKm );;
		}
		float CloudMeanCoverage = 1.0 - MeanTransmittance;
		Luminance = AerialPerspective.rgb * CloudMeanCoverage + AerialPerspective.a * Luminance;
	}
	if (tAPWeightsSum > 0.0f)
	{
		float4 HeightFogInscatteringAndTransmittance = float4(0, 0, 0, 1);
		if (RenderVolumetricCloudParameters.EnableHeightFog)
		{
			HeightFogInscatteringAndTransmittance = CalculateHeightFog(FogSampleWorldPositionRelativeToCameraCm);
		}
		uint2 TilePos = uint2(SvPosition.xy * RenderVolumetricCloudParameters.TracingCoordToFullResPixelCoordScaleBias.xy - View.ViewRectMin.xy) / RenderVolumetricCloudParameters.LFV_LocalFogVolumeTilePixelSize.xx;
		float4 LFVContribution = GetLFVContribution(GetPrimaryView(), TilePos, FogSampleWorldPositionRelativeToCameraCm);
		if (RenderVolumetricCloudParameters.LFV_ShouldRenderLocalFogVolumeInVolumetricFog > 0)
		{
			HeightFogInscatteringAndTransmittance = float4(LFVContribution.rgb + HeightFogInscatteringAndTransmittance.rgb * LFVContribution.a, LFVContribution.a * HeightFogInscatteringAndTransmittance.a);
		}
		if (RenderVolumetricCloudParameters.ApplyVolumetricFog > 0)
		{
			float3 VolumeUV = ComputeVolumeUVFromNDC(ClipPos);
			const uint EyeIndex = 0;
			HeightFogInscatteringAndTransmittance = CombineVolumetricFog(HeightFogInscatteringAndTransmittance, VolumeUV, EyeIndex, length(FogSampleWorldPositionRelativeToCameraCm));
		}
		if (RenderVolumetricCloudParameters.LFV_ShouldRenderLocalFogVolumeInVolumetricFog == 0)
		{
			HeightFogInscatteringAndTransmittance = float4(LFVContribution.rgb + HeightFogInscatteringAndTransmittance.rgb * LFVContribution.a, LFVContribution.a * HeightFogInscatteringAndTransmittance.a);
		}
		float CloudMeanCoverage = 1.0 - MeanTransmittance;
		Luminance = HeightFogInscatteringAndTransmittance.rgb * CloudMeanCoverage + HeightFogInscatteringAndTransmittance.a * Luminance;
	}
	float GrayScaleTransmittance = MeanTransmittance < RenderVolumetricCloudParameters.StopTracingTransmittanceThreshold ? 0.0f : MeanTransmittance;
	OutColor0 = float4(Luminance * OutputPreExposure, GrayScaleTransmittance);
	OutDepth.x = MaxHalfFloat; 
	if (RenderVolumetricCloudParameters.OpaqueIntersectionMode >= 1)
	{
		OutDepth.x = ((GrayScaleTransmittance > 0.99) ? NoCloudDepth : tAP) * (1.0f / (1000.0f * 100.0f)); 
	}
}
float4 OutputViewRect;
int bBlendCloudColor;
int TargetCubeFace;
RWTexture2D<float4> OutCloudColor0;
RWTexture2D<float4> OutCloudDepth;
RWTexture2DArray<float4> OutCloudColorCube;
[numthreads(8, 8, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	[branch]
	if (all(DispatchThreadId < uint2(OutputViewRect.zw)))
	{
		float4 SvPosition = float4(DispatchThreadId.x + 0.5, DispatchThreadId.y + 0.5, 0.5, 1);
		float4 OutColor0;
		float4 OutDepth;
		FMaterialPixelParameters MaterialParameters = MakeInitializedMaterialPixelParameters();
		float OutHoldOutCoverage = 0.0f;
		float OutAboveCloudHoldOut = 0.0f;
		MainCommon(MaterialParameters, SvPosition, OutColor0
			, OutDepth
			, OutHoldOutCoverage
			, OutAboveCloudHoldOut);
		if (TargetCubeFace >= 0)
		{
			uint3 CubemapCoord = uint3(DispatchThreadId, TargetCubeFace);
			if (bBlendCloudColor)
			{
				float4 CurColor0 = OutCloudColorCube[CubemapCoord];
				OutCloudColorCube[CubemapCoord] = float4(CurColor0.rgb * OutColor0.a + OutColor0.rgb, CurColor0.a * OutColor0.a);
			}
			else
			{
				OutCloudColorCube[CubemapCoord] = OutColor0;
			}
		}
		else
		{
			if (bBlendCloudColor)
			{
				float4 CurColor0 = OutCloudColor0[DispatchThreadId];
				{
					OutCloudColor0[DispatchThreadId] = float4(CurColor0.rgb * OutColor0.a + OutColor0.rgb, CurColor0.a);
				}
			}
			else
			{
				OutCloudColor0[DispatchThreadId] = OutColor0;
			}
		}
		OutCloudDepth[DispatchThreadId] = OutDepth;
	}
}

/* BASE64_ENV

BASE64_ENV */
/* DIRECT COMPILE
-directcompile -format=PCD3D_SM6 -entry="MainCS" -shaderPlatformName=PCD3D_SM6 -supportedHardwareMask=0 -cs C:/VP_workspace/Binlye/Binlye_Injeongjeon/Saved/ShaderDebugInfo/PCD3D_SM6/Volumetric_Clouds_112844858e5aaa34/Default/FLocalVertexFactory/FRenderVolumetricCloudRenderViewCS/39/VolumetricCloud.usf -nocrashreports
DIRECT COMPILE */
